
Grafisk lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c4  00800100  00001984  00001a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000208  008003c4  008003c4  00001cdc  2**0
                  ALLOC
  3 .stab         000027b4  00000000  00000000  00001cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009ba  00000000  00000000  00004490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00004e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001179  00000000  00000000  00004f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000035a  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079d  00000000  00000000  000063e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f0  00000000  00000000  00006b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000462  00000000  00000000  00007170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a40  00000000  00000000  000075d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00009012  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e8       	ldi	r30, 0x84	; 132
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3c       	cpi	r26, 0xC4	; 196
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	15 e0       	ldi	r17, 0x05	; 5
      8c:	a4 ec       	ldi	r26, 0xC4	; 196
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 3c       	cpi	r26, 0xCC	; 204
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <main>
      9e:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_serial>:
volatile bool ready = true;


void init_serial()
{
	ddr |= pin;		//make output
      a6:	3c 9a       	sbi	0x07, 4	; 7
	port |= pin;	//set high
      a8:	44 9a       	sbi	0x08, 4	; 8
	
	// Turn on timer with no prescaler on the clock for fastest
	// triggering of the interrupt service routine.
	TCCR1B |= 1 ;
      aa:	e1 e8       	ldi	r30, 0x81	; 129
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	80 81       	ld	r24, Z
      b0:	81 60       	ori	r24, 0x01	; 1
      b2:	80 83       	st	Z, r24
	TIMSK1 |= _BV(TOIE1);
      b4:	ef e6       	ldi	r30, 0x6F	; 111
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	80 81       	ld	r24, Z
      ba:	81 60       	ori	r24, 0x01	; 1
      bc:	80 83       	st	Z, r24
	// Turn interrupts on.
	sei();
      be:	78 94       	sei
}
      c0:	08 95       	ret

000000c2 <send_char>:

void send_char(char C)
{
	while (!ready)		//vänta på att data är skickad
      c2:	90 91 bc 03 	lds	r25, 0x03BC
      c6:	99 23       	and	r25, r25
      c8:	e1 f3       	breq	.-8      	; 0xc2 <send_char>
	{	//nop
	}
	data_to_send = C;	
      ca:	80 93 cb 03 	sts	0x03CB, r24
	ready = false;		// börja skicka
      ce:	10 92 bc 03 	sts	0x03BC, r1
}
      d2:	08 95       	ret

000000d4 <send_string>:
void send_string(char *s)  //Skriver ut en sträng
{
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	ec 01       	movw	r28, r24
	while(*s)
      da:	88 81       	ld	r24, Y
      dc:	88 23       	and	r24, r24
      de:	31 f0       	breq	.+12     	; 0xec <send_string+0x18>
	{	//nop
	}
	data_to_send = C;	
	ready = false;		// börja skicka
}
void send_string(char *s)  //Skriver ut en sträng
      e0:	21 96       	adiw	r28, 0x01	; 1
{
	while(*s)
	{
		send_char(*s);	//Skriv ut bokstaven
      e2:	0e 94 61 00 	call	0xc2	; 0xc2 <send_char>
	data_to_send = C;	
	ready = false;		// börja skicka
}
void send_string(char *s)  //Skriver ut en sträng
{
	while(*s)
      e6:	89 91       	ld	r24, Y+
      e8:	88 23       	and	r24, r24
      ea:	d9 f7       	brne	.-10     	; 0xe2 <send_string+0xe>
	{
		send_char(*s);	//Skriv ut bokstaven
		s++;			//Öka char-pointern
	}
}
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <__vector_13>:

ISR(TIMER1_OVF_vect) 
{
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	0f 92       	push	r0
      fa:	11 24       	eor	r1, r1
      fc:	8f 93       	push	r24
      fe:	9f 93       	push	r25
	
	TCNT1 = 64720;		//sätt in ett värde i räknaren för att få rätt period
     100:	80 ed       	ldi	r24, 0xD0	; 208
     102:	9c ef       	ldi	r25, 0xFC	; 252
     104:	90 93 85 00 	sts	0x0085, r25
     108:	80 93 84 00 	sts	0x0084, r24
	if(ready == false)
     10c:	80 91 bc 03 	lds	r24, 0x03BC
     110:	88 23       	and	r24, r24
     112:	09 f0       	breq	.+2      	; 0x116 <__vector_13+0x24>
     114:	99 c0       	rjmp	.+306    	; 0x248 <__vector_13+0x156>
	{
		switch(state)
     116:	80 91 ca 03 	lds	r24, 0x03CA
     11a:	84 30       	cpi	r24, 0x04	; 4
     11c:	09 f4       	brne	.+2      	; 0x120 <__vector_13+0x2e>
     11e:	4d c0       	rjmp	.+154    	; 0x1ba <__vector_13+0xc8>
     120:	85 30       	cpi	r24, 0x05	; 5
     122:	50 f4       	brcc	.+20     	; 0x138 <__vector_13+0x46>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	11 f1       	breq	.+68     	; 0x16c <__vector_13+0x7a>
     128:	81 30       	cpi	r24, 0x01	; 1
     12a:	c8 f0       	brcs	.+50     	; 0x15e <__vector_13+0x6c>
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	59 f1       	breq	.+86     	; 0x186 <__vector_13+0x94>
     130:	83 30       	cpi	r24, 0x03	; 3
     132:	09 f0       	breq	.+2      	; 0x136 <__vector_13+0x44>
     134:	89 c0       	rjmp	.+274    	; 0x248 <__vector_13+0x156>
     136:	34 c0       	rjmp	.+104    	; 0x1a0 <__vector_13+0xae>
     138:	87 30       	cpi	r24, 0x07	; 7
     13a:	09 f4       	brne	.+2      	; 0x13e <__vector_13+0x4c>
     13c:	65 c0       	rjmp	.+202    	; 0x208 <__vector_13+0x116>
     13e:	88 30       	cpi	r24, 0x08	; 8
     140:	38 f4       	brcc	.+14     	; 0x150 <__vector_13+0x5e>
     142:	85 30       	cpi	r24, 0x05	; 5
     144:	09 f4       	brne	.+2      	; 0x148 <__vector_13+0x56>
     146:	46 c0       	rjmp	.+140    	; 0x1d4 <__vector_13+0xe2>
     148:	86 30       	cpi	r24, 0x06	; 6
     14a:	09 f0       	breq	.+2      	; 0x14e <__vector_13+0x5c>
     14c:	7d c0       	rjmp	.+250    	; 0x248 <__vector_13+0x156>
     14e:	4f c0       	rjmp	.+158    	; 0x1ee <__vector_13+0xfc>
     150:	88 30       	cpi	r24, 0x08	; 8
     152:	09 f4       	brne	.+2      	; 0x156 <__vector_13+0x64>
     154:	66 c0       	rjmp	.+204    	; 0x222 <__vector_13+0x130>
     156:	89 30       	cpi	r24, 0x09	; 9
     158:	09 f0       	breq	.+2      	; 0x15c <__vector_13+0x6a>
     15a:	76 c0       	rjmp	.+236    	; 0x248 <__vector_13+0x156>
     15c:	6f c0       	rjmp	.+222    	; 0x23c <__vector_13+0x14a>
		{
			
			case 0 :		//startbit
				port &= ~pin;
     15e:	44 98       	cbi	0x08, 4	; 8
				state++;
     160:	80 91 ca 03 	lds	r24, 0x03CA
     164:	8f 5f       	subi	r24, 0xFF	; 255
     166:	80 93 ca 03 	sts	0x03CA, r24
				break;
     16a:	6e c0       	rjmp	.+220    	; 0x248 <__vector_13+0x156>
				
			case 1 :		//databit ett
				
				if (data_to_send & 1)
     16c:	80 91 cb 03 	lds	r24, 0x03CB
     170:	80 ff       	sbrs	r24, 0
     172:	02 c0       	rjmp	.+4      	; 0x178 <__vector_13+0x86>
				{
					port |= pin;
     174:	44 9a       	sbi	0x08, 4	; 8
     176:	01 c0       	rjmp	.+2      	; 0x17a <__vector_13+0x88>
				}
				else
				{
					port &= ~pin;
     178:	44 98       	cbi	0x08, 4	; 8
				}
				state++;
     17a:	80 91 ca 03 	lds	r24, 0x03CA
     17e:	8f 5f       	subi	r24, 0xFF	; 255
     180:	80 93 ca 03 	sts	0x03CA, r24
				break;	
     184:	61 c0       	rjmp	.+194    	; 0x248 <__vector_13+0x156>
				
			case 2:		//databit ett
			
				if (data_to_send & 2)
     186:	80 91 cb 03 	lds	r24, 0x03CB
     18a:	81 ff       	sbrs	r24, 1
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__vector_13+0xa0>
				{
					port |= pin;
     18e:	44 9a       	sbi	0x08, 4	; 8
     190:	01 c0       	rjmp	.+2      	; 0x194 <__vector_13+0xa2>
				} 
				else
				{
					port &= ~pin;
     192:	44 98       	cbi	0x08, 4	; 8
				}
				state++;
     194:	80 91 ca 03 	lds	r24, 0x03CA
     198:	8f 5f       	subi	r24, 0xFF	; 255
     19a:	80 93 ca 03 	sts	0x03CA, r24
				break;
     19e:	54 c0       	rjmp	.+168    	; 0x248 <__vector_13+0x156>
					
			case 3:		//databit ett
			
				if (data_to_send & 4)
     1a0:	80 91 cb 03 	lds	r24, 0x03CB
     1a4:	82 ff       	sbrs	r24, 2
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__vector_13+0xba>
				{
					port |= pin;
     1a8:	44 9a       	sbi	0x08, 4	; 8
     1aa:	01 c0       	rjmp	.+2      	; 0x1ae <__vector_13+0xbc>
				} 
				else
				{
					port &= ~pin;
     1ac:	44 98       	cbi	0x08, 4	; 8
				}
				state++;
     1ae:	80 91 ca 03 	lds	r24, 0x03CA
     1b2:	8f 5f       	subi	r24, 0xFF	; 255
     1b4:	80 93 ca 03 	sts	0x03CA, r24
				break;
     1b8:	47 c0       	rjmp	.+142    	; 0x248 <__vector_13+0x156>
				
			case 4:		//databit ett
			
				if (data_to_send & 8)
     1ba:	80 91 cb 03 	lds	r24, 0x03CB
     1be:	83 ff       	sbrs	r24, 3
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__vector_13+0xd4>
				{
					port |= pin;
     1c2:	44 9a       	sbi	0x08, 4	; 8
     1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <__vector_13+0xd6>
				} 
				else
				{
					port &= ~pin;
     1c6:	44 98       	cbi	0x08, 4	; 8
				}
				state++;
     1c8:	80 91 ca 03 	lds	r24, 0x03CA
     1cc:	8f 5f       	subi	r24, 0xFF	; 255
     1ce:	80 93 ca 03 	sts	0x03CA, r24
				break;
     1d2:	3a c0       	rjmp	.+116    	; 0x248 <__vector_13+0x156>
				
			case 5:		//databit ett
			
				if (data_to_send & 16)
     1d4:	80 91 cb 03 	lds	r24, 0x03CB
     1d8:	84 ff       	sbrs	r24, 4
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__vector_13+0xee>
				{
					port |= pin;
     1dc:	44 9a       	sbi	0x08, 4	; 8
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <__vector_13+0xf0>
				} 
				else
				{
					port &= ~pin;
     1e0:	44 98       	cbi	0x08, 4	; 8
				}
				state++;
     1e2:	80 91 ca 03 	lds	r24, 0x03CA
     1e6:	8f 5f       	subi	r24, 0xFF	; 255
     1e8:	80 93 ca 03 	sts	0x03CA, r24
				break;
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__vector_13+0x156>
				
			case 6:		//databit fem
			
				if (data_to_send & 32)
     1ee:	80 91 cb 03 	lds	r24, 0x03CB
     1f2:	85 ff       	sbrs	r24, 5
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <__vector_13+0x108>
				{
					port |= pin;
     1f6:	44 9a       	sbi	0x08, 4	; 8
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <__vector_13+0x10a>
				} 
				else
				{
					port &= ~pin;
     1fa:	44 98       	cbi	0x08, 4	; 8
				}
				state++;
     1fc:	80 91 ca 03 	lds	r24, 0x03CA
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	80 93 ca 03 	sts	0x03CA, r24
				break;
     206:	20 c0       	rjmp	.+64     	; 0x248 <__vector_13+0x156>
				
			case 7:		//databit sex
			
				if (data_to_send & 64)
     208:	80 91 cb 03 	lds	r24, 0x03CB
     20c:	86 ff       	sbrs	r24, 6
     20e:	02 c0       	rjmp	.+4      	; 0x214 <__vector_13+0x122>
				{
					port |= pin;
     210:	44 9a       	sbi	0x08, 4	; 8
     212:	01 c0       	rjmp	.+2      	; 0x216 <__vector_13+0x124>
				} 
				else
				{
					port &= ~pin;
     214:	44 98       	cbi	0x08, 4	; 8
				}
				state++;
     216:	80 91 ca 03 	lds	r24, 0x03CA
     21a:	8f 5f       	subi	r24, 0xFF	; 255
     21c:	80 93 ca 03 	sts	0x03CA, r24
				break;
     220:	13 c0       	rjmp	.+38     	; 0x248 <__vector_13+0x156>
					
			case 8:		//databit sju
			
				if (data_to_send & 128)
     222:	80 91 cb 03 	lds	r24, 0x03CB
     226:	88 23       	and	r24, r24
     228:	14 f4       	brge	.+4      	; 0x22e <__vector_13+0x13c>
				{
					port |= pin;
     22a:	44 9a       	sbi	0x08, 4	; 8
     22c:	01 c0       	rjmp	.+2      	; 0x230 <__vector_13+0x13e>
				} 
				else
				{
					port &= ~pin;
     22e:	44 98       	cbi	0x08, 4	; 8
				}
				state++;
     230:	80 91 ca 03 	lds	r24, 0x03CA
     234:	8f 5f       	subi	r24, 0xFF	; 255
     236:	80 93 ca 03 	sts	0x03CA, r24
				break;
     23a:	06 c0       	rjmp	.+12     	; 0x248 <__vector_13+0x156>
					
			case 9:		//stopbit
			
				port |= pin;
     23c:	44 9a       	sbi	0x08, 4	; 8
				state = 0;
     23e:	10 92 ca 03 	sts	0x03CA, r1
				ready = true;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	80 93 bc 03 	sts	0x03BC, r24
				break;
		}
		
	}
	
}
     248:	9f 91       	pop	r25
     24a:	8f 91       	pop	r24
     24c:	0f 90       	pop	r0
     24e:	0f be       	out	0x3f, r0	; 63
     250:	0f 90       	pop	r0
     252:	1f 90       	pop	r1
     254:	18 95       	reti

00000256 <clear_CS>:
	clear_Wrr();
	set_Wrr();
}
void clear_CS()
{
	flagport = flagport & ~( 1 << CS );
     256:	5d 98       	cbi	0x0b, 5	; 11
}
     258:	08 95       	ret

0000025a <set_CS>:
void set_CS()
{
	flagport = flagport | ( 1 << CS );
     25a:	5d 9a       	sbi	0x0b, 5	; 11
}
     25c:	08 95       	ret

0000025e <clear_Wrr>:
void clear_Wrr()
{
	flagport = flagport & ~( 1 << Wrr );
     25e:	5f 98       	cbi	0x0b, 7	; 11
}
     260:	08 95       	ret

00000262 <set_Wrr>:
void set_Wrr()
{
	flagport = flagport | ( 1 << Wrr );
     262:	5f 9a       	sbi	0x0b, 7	; 11
}
     264:	08 95       	ret

00000266 <toggle_Wrr>:


//io funktioner för mer läsbar kod
void toggle_Wrr()
{
	clear_Wrr();
     266:	0e 94 2f 01 	call	0x25e	; 0x25e <clear_Wrr>
	set_Wrr();
     26a:	0e 94 31 01 	call	0x262	; 0x262 <set_Wrr>
}
     26e:	08 95       	ret

00000270 <clear_Rdd>:
{
	flagport = flagport | ( 1 << Wrr );
}
void clear_Rdd()
{
	flagport = flagport & ~( 1 << Rdd );
     270:	5e 98       	cbi	0x0b, 6	; 11
}
     272:	08 95       	ret

00000274 <set_Rdd>:
void set_Rdd()
{
	flagport = flagport | ( 1 << Rdd );
     274:	5e 9a       	sbi	0x0b, 6	; 11
}
     276:	08 95       	ret

00000278 <clear_RS>:
void clear_RS()
{
	flagport = flagport & ~( 1 << RS );
     278:	5c 98       	cbi	0x0b, 4	; 11
}
     27a:	08 95       	ret

0000027c <LCD_write_cmd>:

							 };


void LCD_write_cmd(unsigned char data)	//rutin för att skicka kommando
{
     27c:	cf 93       	push	r28
     27e:	c8 2f       	mov	r28, r24
	clear_CS();		//Cs=0
     280:	0e 94 2b 01 	call	0x256	; 0x256 <clear_CS>
	set_Rdd();				//R=1
     284:	0e 94 3a 01 	call	0x274	; 0x274 <set_Rdd>
	clear_RS();				//Rs=0
     288:	0e 94 3c 01 	call	0x278	; 0x278 <clear_RS>
	dataport = data;
     28c:	c5 b9       	out	0x05, r28	; 5
	toggle_Wrr();				//W=0
     28e:	0e 94 33 01 	call	0x266	; 0x266 <toggle_Wrr>
								//W=1
	set_CS();				//Cs=1
     292:	0e 94 2d 01 	call	0x25a	; 0x25a <set_CS>
}
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <LCD_write_adr>:
	
	
}

void LCD_write_adr(unsigned int x, unsigned int y)	//skriv en adress till LCD
{
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	d8 2f       	mov	r29, r24
     2a0:	89 2f       	mov	r24, r25
     2a2:	c6 2f       	mov	r28, r22
	unsigned int xhigh, xlow = 0;
	
	xhigh = x / 256;	//filtrera ut hög och låg adress
	xlow = x % 256;
	
	LCD_write_cmd(xhigh);
     2a4:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_write_cmd>
	
	LCD_write_cmd(xlow);
     2a8:	8d 2f       	mov	r24, r29
     2aa:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_write_cmd>
	
	LCD_write_cmd(y);
     2ae:	8c 2f       	mov	r24, r28
     2b0:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_write_cmd>
}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <set_RS>:
{
	flagport = flagport & ~( 1 << RS );
}
void set_RS()
{
	flagport = flagport | ( 1 << RS );
     2ba:	5c 9a       	sbi	0x0b, 4	; 11
}
     2bc:	08 95       	ret

000002be <LCD_write_data>:
	toggle_Wrr();				//W=0
								//W=1
	set_CS();				//Cs=1
}
void LCD_write_data(unsigned char data)	//skriv data
{
     2be:	cf 93       	push	r28
     2c0:	c8 2f       	mov	r28, r24

	clear_CS();		//Cs=0
     2c2:	0e 94 2b 01 	call	0x256	; 0x256 <clear_CS>
	set_Rdd();				//R=1
     2c6:	0e 94 3a 01 	call	0x274	; 0x274 <set_Rdd>
	set_RS();				//Rs=1
     2ca:	0e 94 5d 01 	call	0x2ba	; 0x2ba <set_RS>
	dataport = data;
     2ce:	c5 b9       	out	0x05, r28	; 5
	toggle_Wrr();				//W=0
     2d0:	0e 94 33 01 	call	0x266	; 0x266 <toggle_Wrr>
	//W=1
	set_CS();				//Cs=1
     2d4:	0e 94 2d 01 	call	0x25a	; 0x25a <set_CS>
	
	
}
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <disp_all>:
	
	LCD_write_cmd(y);
}

void disp_all(unsigned char color)	//fyll skärmen med en bakgrundsfärg
{
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	18 2f       	mov	r17, r24
	LCD_write_adr(0,0);
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_write_adr>
     2f8:	0f 2e       	mov	r0, r31
     2fa:	f0 ef       	ldi	r31, 0xF0	; 240
     2fc:	ef 2e       	mov	r14, r31
     2fe:	ff 24       	eor	r15, r15
     300:	f0 2d       	mov	r31, r0
	
	LCD_write_cmd(y);
}

void disp_all(unsigned char color)	//fyll skärmen med en bakgrundsfärg
{
     302:	0f 2e       	mov	r0, r31
     304:	f0 e4       	ldi	r31, 0x40	; 64
     306:	cf 2e       	mov	r12, r31
     308:	f1 e0       	ldi	r31, 0x01	; 1
     30a:	df 2e       	mov	r13, r31
     30c:	f0 2d       	mov	r31, r0
     30e:	0b c0       	rjmp	.+22     	; 0x326 <disp_all+0x4a>
	for (int i = 0; i < 240; i++)		//rader
	{
		
		for (int u = 0; u < 320; u++)	//pixlar
		{	
			LCD_write_data(C);
     310:	81 2f       	mov	r24, r17
     312:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_write_data>
     316:	21 97       	sbiw	r28, 0x01	; 1
	LCD_write_adr(0,0);
	unsigned char	C = color;
	for (int i = 0; i < 240; i++)		//rader
	{
		
		for (int u = 0; u < 320; u++)	//pixlar
     318:	d9 f7       	brne	.-10     	; 0x310 <disp_all+0x34>
     31a:	08 94       	sec
     31c:	e1 08       	sbc	r14, r1
     31e:	f1 08       	sbc	r15, r1

void disp_all(unsigned char color)	//fyll skärmen med en bakgrundsfärg
{
	LCD_write_adr(0,0);
	unsigned char	C = color;
	for (int i = 0; i < 240; i++)		//rader
     320:	e1 14       	cp	r14, r1
     322:	f1 04       	cpc	r15, r1
     324:	11 f0       	breq	.+4      	; 0x32a <disp_all+0x4e>
	
	LCD_write_cmd(y);
}

void disp_all(unsigned char color)	//fyll skärmen med en bakgrundsfärg
{
     326:	e6 01       	movw	r28, r12
     328:	f3 cf       	rjmp	.-26     	; 0x310 <disp_all+0x34>
		for (int u = 0; u < 320; u++)	//pixlar
		{	
			LCD_write_data(C);
		}
	}
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	08 95       	ret

0000033a <LCD_write_big_char_row>:
		//LCD_write_big_char_row( tecken, color, x + i, y+18);		//Debug pryl, binärt värde
		
	}
}
void LCD_write_big_char_row(char row, char color, int x, int y, int size)	//skriv én kolumn av en bokstav
{
     33a:	2f 92       	push	r2
     33c:	3f 92       	push	r3
     33e:	4f 92       	push	r4
     340:	5f 92       	push	r5
     342:	6f 92       	push	r6
     344:	7f 92       	push	r7
     346:	9f 92       	push	r9
     348:	af 92       	push	r10
     34a:	bf 92       	push	r11
     34c:	cf 92       	push	r12
     34e:	df 92       	push	r13
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	00 d0       	rcall	.+0      	; 0x35e <LCD_write_big_char_row+0x24>
     35e:	00 d0       	rcall	.+0      	; 0x360 <LCD_write_big_char_row+0x26>
     360:	00 d0       	rcall	.+0      	; 0x362 <LCD_write_big_char_row+0x28>
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	f6 2e       	mov	r15, r22
     368:	3a 01       	movw	r6, r20

		//LCD_write_big_char_row( tecken, color, x + i, y+18);		//Debug pryl, binärt värde
		
	}
}
void LCD_write_big_char_row(char row, char color, int x, int y, int size)	//skriv én kolumn av en bokstav
     36a:	1a 83       	std	Y+2, r17	; 0x02
     36c:	09 83       	std	Y+1, r16	; 0x01
     36e:	a2 2e       	mov	r10, r18
     370:	b3 2e       	mov	r11, r19
{
	for (int i = 0; i < 8; i++)	//loopa igenom column
     372:	44 24       	eor	r4, r4
     374:	55 24       	eor	r5, r5
	{
		
		if ((row & ( 1 << i )) != 0)		//	förgrundsfärg eller bakgrund?
     376:	28 2f       	mov	r18, r24
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	3c 83       	std	Y+4, r19	; 0x04
     37c:	2b 83       	std	Y+3, r18	; 0x03
		{
			for (int j = 0; j < size; j++)		//	rita en pixel i fyrkant med storleken size
     37e:	22 24       	eor	r2, r2
     380:	33 24       	eor	r3, r3
			{
				LCD_write_adr(x, y + ( i * size + j ));
				for (int k = 0; k < size; k++ )
     382:	e2 2c       	mov	r14, r2
     384:	93 2c       	mov	r9, r3
void LCD_write_big_char_row(char row, char color, int x, int y, int size)	//skriv én kolumn av en bokstav
{
	for (int i = 0; i < 8; i++)	//loopa igenom column
	{
		
		if ((row & ( 1 << i )) != 0)		//	förgrundsfärg eller bakgrund?
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	9c 81       	ldd	r25, Y+4	; 0x04
     38a:	04 2c       	mov	r0, r4
     38c:	02 c0       	rjmp	.+4      	; 0x392 <LCD_write_big_char_row+0x58>
     38e:	95 95       	asr	r25
     390:	87 95       	ror	r24
     392:	0a 94       	dec	r0
     394:	e2 f7       	brpl	.-8      	; 0x38e <LCD_write_big_char_row+0x54>
     396:	80 fd       	sbrc	r24, 0
     398:	04 c0       	rjmp	.+8      	; 0x3a2 <LCD_write_big_char_row+0x68>
				}
			}			
		}
		else
		{
			for (int j = 0; j < size; j++)	//fyll i bakgrundsfärg i rätt pixelstorlek
     39a:	10 16       	cp	r1, r16
     39c:	11 06       	cpc	r1, r17
     39e:	fc f0       	brlt	.+62     	; 0x3de <LCD_write_big_char_row+0xa4>
     3a0:	38 c0       	rjmp	.+112    	; 0x412 <LCD_write_big_char_row+0xd8>
	for (int i = 0; i < 8; i++)	//loopa igenom column
	{
		
		if ((row & ( 1 << i )) != 0)		//	förgrundsfärg eller bakgrund?
		{
			for (int j = 0; j < size; j++)		//	rita en pixel i fyrkant med storleken size
     3a2:	10 16       	cp	r1, r16
     3a4:	11 06       	cpc	r1, r17
     3a6:	ac f5       	brge	.+106    	; 0x412 <LCD_write_big_char_row+0xd8>
     3a8:	61 01       	movw	r12, r2

		//LCD_write_big_char_row( tecken, color, x + i, y+18);		//Debug pryl, binärt värde
		
	}
}
void LCD_write_big_char_row(char row, char color, int x, int y, int size)	//skriv én kolumn av en bokstav
     3aa:	b6 01       	movw	r22, r12
     3ac:	6a 0d       	add	r22, r10
     3ae:	7b 1d       	adc	r23, r11
		
		if ((row & ( 1 << i )) != 0)		//	förgrundsfärg eller bakgrund?
		{
			for (int j = 0; j < size; j++)		//	rita en pixel i fyrkant med storleken size
			{
				LCD_write_adr(x, y + ( i * size + j ));
     3b0:	c3 01       	movw	r24, r6
     3b2:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_write_adr>
				for (int k = 0; k < size; k++ )
     3b6:	ed 82       	std	Y+5, r14	; 0x05
     3b8:	9e 82       	std	Y+6, r9	; 0x06
				{
					LCD_write_data(color);
     3ba:	8f 2d       	mov	r24, r15
     3bc:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_write_data>
		if ((row & ( 1 << i )) != 0)		//	förgrundsfärg eller bakgrund?
		{
			for (int j = 0; j < size; j++)		//	rita en pixel i fyrkant med storleken size
			{
				LCD_write_adr(x, y + ( i * size + j ));
				for (int k = 0; k < size; k++ )
     3c0:	8d 81       	ldd	r24, Y+5	; 0x05
     3c2:	9e 81       	ldd	r25, Y+6	; 0x06
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	9e 83       	std	Y+6, r25	; 0x06
     3c8:	8d 83       	std	Y+5, r24	; 0x05
     3ca:	80 17       	cp	r24, r16
     3cc:	91 07       	cpc	r25, r17
     3ce:	a9 f7       	brne	.-22     	; 0x3ba <LCD_write_big_char_row+0x80>
	for (int i = 0; i < 8; i++)	//loopa igenom column
	{
		
		if ((row & ( 1 << i )) != 0)		//	förgrundsfärg eller bakgrund?
		{
			for (int j = 0; j < size; j++)		//	rita en pixel i fyrkant med storleken size
     3d0:	08 94       	sec
     3d2:	c1 1c       	adc	r12, r1
     3d4:	d1 1c       	adc	r13, r1
     3d6:	c0 16       	cp	r12, r16
     3d8:	d1 06       	cpc	r13, r17
     3da:	39 f7       	brne	.-50     	; 0x3aa <LCD_write_big_char_row+0x70>
     3dc:	1a c0       	rjmp	.+52     	; 0x412 <LCD_write_big_char_row+0xd8>
				}
			}			
		}
		else
		{
			for (int j = 0; j < size; j++)	//fyll i bakgrundsfärg i rätt pixelstorlek
     3de:	61 01       	movw	r12, r2

		//LCD_write_big_char_row( tecken, color, x + i, y+18);		//Debug pryl, binärt värde
		
	}
}
void LCD_write_big_char_row(char row, char color, int x, int y, int size)	//skriv én kolumn av en bokstav
     3e0:	b5 01       	movw	r22, r10
     3e2:	6c 0d       	add	r22, r12
     3e4:	7d 1d       	adc	r23, r13
		}
		else
		{
			for (int j = 0; j < size; j++)	//fyll i bakgrundsfärg i rätt pixelstorlek
			{
				LCD_write_adr(x, y + ( i * size + j ));
     3e6:	c3 01       	movw	r24, r6
     3e8:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_write_adr>
				for (int k = 0; k < size; k++ )
     3ec:	ed 82       	std	Y+5, r14	; 0x05
     3ee:	9e 82       	std	Y+6, r9	; 0x06
				{
					LCD_write_data(white);
     3f0:	8f ef       	ldi	r24, 0xFF	; 255
     3f2:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_write_data>
		else
		{
			for (int j = 0; j < size; j++)	//fyll i bakgrundsfärg i rätt pixelstorlek
			{
				LCD_write_adr(x, y + ( i * size + j ));
				for (int k = 0; k < size; k++ )
     3f6:	ed 81       	ldd	r30, Y+5	; 0x05
     3f8:	fe 81       	ldd	r31, Y+6	; 0x06
     3fa:	31 96       	adiw	r30, 0x01	; 1
     3fc:	fe 83       	std	Y+6, r31	; 0x06
     3fe:	ed 83       	std	Y+5, r30	; 0x05
     400:	e0 17       	cp	r30, r16
     402:	f1 07       	cpc	r31, r17
     404:	a9 f7       	brne	.-22     	; 0x3f0 <LCD_write_big_char_row+0xb6>
				}
			}			
		}
		else
		{
			for (int j = 0; j < size; j++)	//fyll i bakgrundsfärg i rätt pixelstorlek
     406:	08 94       	sec
     408:	c1 1c       	adc	r12, r1
     40a:	d1 1c       	adc	r13, r1
     40c:	c0 16       	cp	r12, r16
     40e:	d1 06       	cpc	r13, r17
     410:	39 f7       	brne	.-50     	; 0x3e0 <LCD_write_big_char_row+0xa6>
		
	}
}
void LCD_write_big_char_row(char row, char color, int x, int y, int size)	//skriv én kolumn av en bokstav
{
	for (int i = 0; i < 8; i++)	//loopa igenom column
     412:	08 94       	sec
     414:	41 1c       	adc	r4, r1
     416:	51 1c       	adc	r5, r1
     418:	29 81       	ldd	r18, Y+1	; 0x01
     41a:	3a 81       	ldd	r19, Y+2	; 0x02
     41c:	a2 0e       	add	r10, r18
     41e:	b3 1e       	adc	r11, r19
     420:	38 e0       	ldi	r19, 0x08	; 8
     422:	43 16       	cp	r4, r19
     424:	51 04       	cpc	r5, r1
     426:	09 f0       	breq	.+2      	; 0x42a <LCD_write_big_char_row+0xf0>
     428:	ae cf       	rjmp	.-164    	; 0x386 <LCD_write_big_char_row+0x4c>
					LCD_write_data(white);
				}
			}
		}
	}
}
     42a:	26 96       	adiw	r28, 0x06	; 6
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	bf 90       	pop	r11
     448:	af 90       	pop	r10
     44a:	9f 90       	pop	r9
     44c:	7f 90       	pop	r7
     44e:	6f 90       	pop	r6
     450:	5f 90       	pop	r5
     452:	4f 90       	pop	r4
     454:	3f 90       	pop	r3
     456:	2f 90       	pop	r2
     458:	08 95       	ret

0000045a <LCD_write_big_char>:
{
	LCD_write_big_char(tecken,color,x,y,1);
}

void LCD_write_big_char(unsigned char tecken, char color, int x, int y, int size)//rita ett tecken med storlek size
{
     45a:	4f 92       	push	r4
     45c:	5f 92       	push	r5
     45e:	7f 92       	push	r7
     460:	8f 92       	push	r8
     462:	9f 92       	push	r9
     464:	af 92       	push	r10
     466:	bf 92       	push	r11
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	76 2e       	mov	r7, r22
     47a:	29 01       	movw	r4, r18
     47c:	b0 2e       	mov	r11, r16
     47e:	a1 2e       	mov	r10, r17
	
	
	if(tecken == 'ä' || tecken == 'Ä')	//filtrera lite mot skandinaviska tecken
     480:	84 3e       	cpi	r24, 0xE4	; 228
     482:	79 f0       	breq	.+30     	; 0x4a2 <LCD_write_big_char+0x48>
     484:	84 3c       	cpi	r24, 0xC4	; 196
     486:	79 f0       	breq	.+30     	; 0x4a6 <LCD_write_big_char+0x4c>
	{
		tecken = 51+44;
	}else if(tecken == 'å' || tecken == 'Å')
     488:	85 3e       	cpi	r24, 0xE5	; 229
     48a:	79 f0       	breq	.+30     	; 0x4aa <LCD_write_big_char+0x50>
     48c:	85 3c       	cpi	r24, 0xC5	; 197
     48e:	79 f0       	breq	.+30     	; 0x4ae <LCD_write_big_char+0x54>
	{
		tecken = 51+45;
	
	}else if(tecken == 'ö' || tecken == 'Ö')
     490:	86 3f       	cpi	r24, 0xF6	; 246
     492:	79 f0       	breq	.+30     	; 0x4b2 <LCD_write_big_char+0x58>
     494:	86 3d       	cpi	r24, 0xD6	; 214
     496:	79 f0       	breq	.+30     	; 0x4b6 <LCD_write_big_char+0x5c>
	{
		tecken = 51+46;
		
	}else if(tecken > 31){
     498:	80 32       	cpi	r24, 0x20	; 32
     49a:	78 f0       	brcs	.+30     	; 0x4ba <LCD_write_big_char+0x60>
		
		tecken -= 32;		//32, offset mot ascii til char arrayen
     49c:	28 2f       	mov	r18, r24
     49e:	20 52       	subi	r18, 0x20	; 32
     4a0:	0d c0       	rjmp	.+26     	; 0x4bc <LCD_write_big_char+0x62>
{
	
	
	if(tecken == 'ä' || tecken == 'Ä')	//filtrera lite mot skandinaviska tecken
	{
		tecken = 51+44;
     4a2:	2f e5       	ldi	r18, 0x5F	; 95
     4a4:	0b c0       	rjmp	.+22     	; 0x4bc <LCD_write_big_char+0x62>
     4a6:	2f e5       	ldi	r18, 0x5F	; 95
     4a8:	09 c0       	rjmp	.+18     	; 0x4bc <LCD_write_big_char+0x62>
	}else if(tecken == 'å' || tecken == 'Å')
	{
		tecken = 51+45;
     4aa:	20 e6       	ldi	r18, 0x60	; 96
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <LCD_write_big_char+0x62>
     4ae:	20 e6       	ldi	r18, 0x60	; 96
     4b0:	05 c0       	rjmp	.+10     	; 0x4bc <LCD_write_big_char+0x62>
	
	}else if(tecken == 'ö' || tecken == 'Ö')
	{
		tecken = 51+46;
     4b2:	21 e6       	ldi	r18, 0x61	; 97
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <LCD_write_big_char+0x62>
     4b6:	21 e6       	ldi	r18, 0x61	; 97
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <LCD_write_big_char+0x62>
		
	}else if(tecken > 31){
		
		tecken -= 32;		//32, offset mot ascii til char arrayen
	}else{
		tecken = 51+46; //ööö
     4ba:	21 e6       	ldi	r18, 0x61	; 97
	}
	
	for (int i = 0; i < 5; i++)
	{

		LCD_write_big_char_row( TEXT[tecken][i], color, x + i*size, y, size);
     4bc:	30 e0       	ldi	r19, 0x00	; 0
void LCD_write_char(unsigned char tecken, char color, int x, int y)	//rita ett litet tecken
{
	LCD_write_big_char(tecken,color,x,y,1);
}

void LCD_write_big_char(unsigned char tecken, char color, int x, int y, int size)//rita ett tecken med storlek size
     4be:	c9 01       	movw	r24, r18
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	82 0f       	add	r24, r18
     4ca:	93 1f       	adc	r25, r19
     4cc:	ec 01       	movw	r28, r24
     4ce:	c8 53       	subi	r28, 0x38	; 56
     4d0:	de 4f       	sbci	r29, 0xFE	; 254
     4d2:	8b 2c       	mov	r8, r11
     4d4:	9a 2c       	mov	r9, r10
     4d6:	c4 2e       	mov	r12, r20
     4d8:	d5 2e       	mov	r13, r21
     4da:	0f 2e       	mov	r0, r31
     4dc:	fd ec       	ldi	r31, 0xCD	; 205
     4de:	ef 2e       	mov	r14, r31
     4e0:	f1 e0       	ldi	r31, 0x01	; 1
     4e2:	ff 2e       	mov	r15, r31
     4e4:	f0 2d       	mov	r31, r0
     4e6:	e8 0e       	add	r14, r24
     4e8:	f9 1e       	adc	r15, r25
	}
	
	for (int i = 0; i < 5; i++)
	{

		LCD_write_big_char_row( TEXT[tecken][i], color, x + i*size, y, size);
     4ea:	89 91       	ld	r24, Y+
     4ec:	67 2d       	mov	r22, r7
     4ee:	a6 01       	movw	r20, r12
     4f0:	92 01       	movw	r18, r4
     4f2:	0b 2d       	mov	r16, r11
     4f4:	1a 2d       	mov	r17, r10
     4f6:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_write_big_char_row>
     4fa:	c8 0c       	add	r12, r8
     4fc:	d9 1c       	adc	r13, r9
		tecken -= 32;		//32, offset mot ascii til char arrayen
	}else{
		tecken = 51+46; //ööö
	}
	
	for (int i = 0; i < 5; i++)
     4fe:	ce 15       	cp	r28, r14
     500:	df 05       	cpc	r29, r15
     502:	99 f7       	brne	.-26     	; 0x4ea <LCD_write_big_char+0x90>
		LCD_write_big_char_row( TEXT[tecken][i], color, x + i*size, y, size);

		//LCD_write_big_char_row( tecken, color, x + i, y+18);		//Debug pryl, binärt värde
		
	}
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	df 90       	pop	r13
     512:	cf 90       	pop	r12
     514:	bf 90       	pop	r11
     516:	af 90       	pop	r10
     518:	9f 90       	pop	r9
     51a:	8f 90       	pop	r8
     51c:	7f 90       	pop	r7
     51e:	5f 90       	pop	r5
     520:	4f 90       	pop	r4
     522:	08 95       	ret

00000524 <LCD_write_char>:
	flagport = flagport | ( 1 << RS );
}


void LCD_write_char(unsigned char tecken, char color, int x, int y)	//rita ett litet tecken
{
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
	LCD_write_big_char(tecken,color,x,y,1);
     528:	01 e0       	ldi	r16, 0x01	; 1
     52a:	10 e0       	ldi	r17, 0x00	; 0
     52c:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_write_big_char>
}
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <LCD_write_big_string>:
void LCD_write_string(char * message, char color, int x, int y)		//skriv text i minsta storleken
{
	LCD_write_big_string(message,color,x,y,1);	
}
void LCD_write_big_string(char * message, char color, int x, int y, int size)	//loopa ut en sträng och hantera teckenspacing och wordwrap
{
     536:	2f 92       	push	r2
     538:	3f 92       	push	r3
     53a:	5f 92       	push	r5
     53c:	6f 92       	push	r6
     53e:	7f 92       	push	r7
     540:	8f 92       	push	r8
     542:	9f 92       	push	r9
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	00 d0       	rcall	.+0      	; 0x55a <LCD_write_big_string+0x24>
     55a:	00 d0       	rcall	.+0      	; 0x55c <LCD_write_big_string+0x26>
     55c:	00 d0       	rcall	.+0      	; 0x55e <LCD_write_big_string+0x28>
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	fc 01       	movw	r30, r24
     564:	56 2e       	mov	r5, r22
     566:	6a 01       	movw	r12, r20
     568:	49 01       	movw	r8, r18
     56a:	38 01       	movw	r6, r16
	for (int i = 0; message[i] != 0; i++)
     56c:	20 81       	ld	r18, Z
     56e:	22 23       	and	r18, r18
     570:	09 f4       	brne	.+2      	; 0x574 <LCD_write_big_string+0x3e>
     572:	44 c0       	rjmp	.+136    	; 0x5fc <LCD_write_big_string+0xc6>
	{
		//wordwrap
		if (x + (size * 6) * (i + 1) >= x_size )
		{
			x = - ( i * (6 * size) );
			y += ( 9 * size );
     574:	c8 01       	movw	r24, r16
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	ac 01       	movw	r20, r24
     584:	40 0f       	add	r20, r16
     586:	51 1f       	adc	r21, r17
     588:	5c 83       	std	Y+4, r21	; 0x04
     58a:	4b 83       	std	Y+3, r20	; 0x03
void LCD_write_big_string(char * message, char color, int x, int y, int size)	//loopa ut en sträng och hantera teckenspacing och wordwrap
{
	for (int i = 0; message[i] != 0; i++)
	{
		//wordwrap
		if (x + (size * 6) * (i + 1) >= x_size )
     58c:	c8 01       	movw	r24, r16
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	80 0f       	add	r24, r16
     594:	91 1f       	adc	r25, r17
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25

void LCD_write_string(char * message, char color, int x, int y)		//skriv text i minsta storleken
{
	LCD_write_big_string(message,color,x,y,1);	
}
void LCD_write_big_string(char * message, char color, int x, int y, int size)	//loopa ut en sträng och hantera teckenspacing och wordwrap
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	89 83       	std	Y+1, r24	; 0x01
	for (int i = 0; message[i] != 0; i++)
	{
		//wordwrap
		if (x + (size * 6) * (i + 1) >= x_size )
		{
			x = - ( i * (6 * size) );
     59e:	22 24       	eor	r2, r2
     5a0:	33 24       	eor	r3, r3
     5a2:	28 1a       	sub	r2, r24
     5a4:	39 0a       	sbc	r3, r25

void LCD_write_string(char * message, char color, int x, int y)		//skriv text i minsta storleken
{
	LCD_write_big_string(message,color,x,y,1);	
}
void LCD_write_big_string(char * message, char color, int x, int y, int size)	//loopa ut en sträng och hantera teckenspacing och wordwrap
     5a6:	5f 01       	movw	r10, r30
     5a8:	08 94       	sec
     5aa:	a1 1c       	adc	r10, r1
     5ac:	b1 1c       	adc	r11, r1
     5ae:	ee 24       	eor	r14, r14
     5b0:	ff 24       	eor	r15, r15
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <LCD_write_big_string+0x86>
{
	for (int i = 0; message[i] != 0; i++)
     5b8:	4d 81       	ldd	r20, Y+5	; 0x05
     5ba:	5e 81       	ldd	r21, Y+6	; 0x06

void LCD_write_string(char * message, char color, int x, int y)		//skriv text i minsta storleken
{
	LCD_write_big_string(message,color,x,y,1);	
}
void LCD_write_big_string(char * message, char color, int x, int y, int size)	//loopa ut en sträng och hantera teckenspacing och wordwrap
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	9a 81       	ldd	r25, Y+2	; 0x02
     5c0:	84 0f       	add	r24, r20
     5c2:	95 1f       	adc	r25, r21
     5c4:	9e 83       	std	Y+6, r25	; 0x06
     5c6:	8d 83       	std	Y+5, r24	; 0x05
{
	for (int i = 0; message[i] != 0; i++)
	{
		//wordwrap
		if (x + (size * 6) * (i + 1) >= x_size )
     5c8:	8c 0d       	add	r24, r12
     5ca:	9d 1d       	adc	r25, r13
     5cc:	a1 e0       	ldi	r26, 0x01	; 1
     5ce:	80 34       	cpi	r24, 0x40	; 64
     5d0:	9a 07       	cpc	r25, r26
     5d2:	2c f0       	brlt	.+10     	; 0x5de <LCD_write_big_string+0xa8>
		{
			x = - ( i * (6 * size) );
     5d4:	67 01       	movw	r12, r14
			y += ( 9 * size );
     5d6:	eb 81       	ldd	r30, Y+3	; 0x03
     5d8:	fc 81       	ldd	r31, Y+4	; 0x04
     5da:	8e 0e       	add	r8, r30
     5dc:	9f 1e       	adc	r9, r31
		}
		LCD_write_big_char(message[i], color, x + ( size * 6 * i ), y, size);
     5de:	4c 0d       	add	r20, r12
     5e0:	5d 1d       	adc	r21, r13
     5e2:	82 2f       	mov	r24, r18
     5e4:	65 2d       	mov	r22, r5
     5e6:	94 01       	movw	r18, r8
     5e8:	83 01       	movw	r16, r6
     5ea:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_write_big_char>
{
	LCD_write_big_string(message,color,x,y,1);	
}
void LCD_write_big_string(char * message, char color, int x, int y, int size)	//loopa ut en sträng och hantera teckenspacing och wordwrap
{
	for (int i = 0; message[i] != 0; i++)
     5ee:	d5 01       	movw	r26, r10
     5f0:	2d 91       	ld	r18, X+
     5f2:	5d 01       	movw	r10, r26
     5f4:	e2 0c       	add	r14, r2
     5f6:	f3 1c       	adc	r15, r3
     5f8:	22 23       	and	r18, r18
     5fa:	f1 f6       	brne	.-68     	; 0x5b8 <LCD_write_big_string+0x82>
			x = - ( i * (6 * size) );
			y += ( 9 * size );
		}
		LCD_write_big_char(message[i], color, x + ( size * 6 * i ), y, size);
	}
}
     5fc:	26 96       	adiw	r28, 0x06	; 6
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	bf 90       	pop	r11
     61a:	af 90       	pop	r10
     61c:	9f 90       	pop	r9
     61e:	8f 90       	pop	r8
     620:	7f 90       	pop	r7
     622:	6f 90       	pop	r6
     624:	5f 90       	pop	r5
     626:	3f 90       	pop	r3
     628:	2f 90       	pop	r2
     62a:	08 95       	ret

0000062c <LCD_write_string>:
		}
	}
}

void LCD_write_string(char * message, char color, int x, int y)		//skriv text i minsta storleken
{
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
	LCD_write_big_string(message,color,x,y,1);	
     630:	01 e0       	ldi	r16, 0x01	; 1
     632:	10 e0       	ldi	r17, 0x00	; 0
     634:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_write_big_string>
}
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	08 95       	ret

0000063e <LCD_draw_x_line>:
		LCD_write_big_char(message[i], color, x + ( size * 6 * i ), y, size);
	}
}

void LCD_draw_x_line(char color, int y, int length)	//rita en linje på höjd y med längd length
{
     63e:	cf 92       	push	r12
     640:	df 92       	push	r13
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	f8 2e       	mov	r15, r24
     64e:	6b 01       	movw	r12, r22
     650:	ea 01       	movw	r28, r20

	for (int i = 0; i < length; i++)
     652:	1c 16       	cp	r1, r28
     654:	1d 06       	cpc	r1, r29
     656:	74 f4       	brge	.+28     	; 0x674 <LCD_draw_x_line+0x36>
     658:	00 e0       	ldi	r16, 0x00	; 0
     65a:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCD_write_adr(i, y);
     65c:	c8 01       	movw	r24, r16
     65e:	b6 01       	movw	r22, r12
     660:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_write_adr>
		LCD_write_data(color);
     664:	8f 2d       	mov	r24, r15
     666:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_write_data>
}

void LCD_draw_x_line(char color, int y, int length)	//rita en linje på höjd y med längd length
{

	for (int i = 0; i < length; i++)
     66a:	0f 5f       	subi	r16, 0xFF	; 255
     66c:	1f 4f       	sbci	r17, 0xFF	; 255
     66e:	0c 17       	cp	r16, r28
     670:	1d 07       	cpc	r17, r29
     672:	a1 f7       	brne	.-24     	; 0x65c <LCD_draw_x_line+0x1e>
	{
		LCD_write_adr(i, y);
		LCD_write_data(color);
	}
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	08 95       	ret

00000684 <even_nums>:
		}
		
	}
}
bool even_nums(int num, int divisor)	//utför float mot int division och se om det ger samma svar
{
     684:	8f 92       	push	r8
     686:	9f 92       	push	r9
     688:	af 92       	push	r10
     68a:	bf 92       	push	r11
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	ec 01       	movw	r28, r24
     69e:	8b 01       	movw	r16, r22
	float in_float = divisor;
	
	if (num/divisor == num/in_float)	//sant om lika
     6a0:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__divmodhi4>
     6a4:	88 27       	eor	r24, r24
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	80 95       	com	r24
     6aa:	98 2f       	mov	r25, r24
     6ac:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     6b0:	4b 01       	movw	r8, r22
     6b2:	5c 01       	movw	r10, r24
     6b4:	be 01       	movw	r22, r28
     6b6:	88 27       	eor	r24, r24
     6b8:	77 fd       	sbrc	r23, 7
     6ba:	80 95       	com	r24
     6bc:	98 2f       	mov	r25, r24
     6be:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     6c2:	6b 01       	movw	r12, r22
     6c4:	7c 01       	movw	r14, r24
		
	}
}
bool even_nums(int num, int divisor)	//utför float mot int division och se om det ger samma svar
{
	float in_float = divisor;
     6c6:	b8 01       	movw	r22, r16
     6c8:	88 27       	eor	r24, r24
     6ca:	77 fd       	sbrc	r23, 7
     6cc:	80 95       	com	r24
     6ce:	98 2f       	mov	r25, r24
     6d0:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     6d4:	9b 01       	movw	r18, r22
     6d6:	ac 01       	movw	r20, r24
	
	if (num/divisor == num/in_float)	//sant om lika
     6d8:	c7 01       	movw	r24, r14
     6da:	b6 01       	movw	r22, r12
     6dc:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divsf3>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
			LCD_write_data(color);
		}
		
	}
}
bool even_nums(int num, int divisor)	//utför float mot int division och se om det ger samma svar
     6e4:	c1 e0       	ldi	r28, 0x01	; 1
     6e6:	c5 01       	movw	r24, r10
     6e8:	b4 01       	movw	r22, r8
     6ea:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__cmpsf2>
     6ee:	81 11       	cpse	r24, r1
     6f0:	c0 e0       	ldi	r28, 0x00	; 0
	float in_float = divisor;
	
	if (num/divisor == num/in_float)	//sant om lika
		return true;
	return false;
}
     6f2:	8c 2f       	mov	r24, r28
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	bf 90       	pop	r11
     706:	af 90       	pop	r10
     708:	9f 90       	pop	r9
     70a:	8f 90       	pop	r8
     70c:	08 95       	ret

0000070e <even_tens>:
bool even_tens(int num)		//kolla efter jämna tiotal
{
	return even_nums(num,10); 
     70e:	6a e0       	ldi	r22, 0x0A	; 10
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	0e 94 42 03 	call	0x684	; 0x684 <even_nums>
}
     716:	08 95       	ret

00000718 <LCD_draw_x_dotted_line>:
		LCD_write_adr(i, y);
		LCD_write_data(color);
	}
}
void LCD_draw_x_dotted_line(char color, int y, int length) //rita en streckad linje på höjd y med längd length
{
     718:	cf 92       	push	r12
     71a:	df 92       	push	r13
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	f8 2e       	mov	r15, r24
     728:	6b 01       	movw	r12, r22
     72a:	ea 01       	movw	r28, r20
	
	for (int i = 0; i < length; i++)
     72c:	1c 16       	cp	r1, r28
     72e:	1d 06       	cpc	r1, r29
     730:	9c f4       	brge	.+38     	; 0x758 <LCD_draw_x_dotted_line+0x40>
     732:	00 e0       	ldi	r16, 0x00	; 0
     734:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (even_tens(i))	//int mot float division
     736:	c8 01       	movw	r24, r16
     738:	0e 94 87 03 	call	0x70e	; 0x70e <even_tens>
     73c:	88 23       	and	r24, r24
     73e:	39 f0       	breq	.+14     	; 0x74e <LCD_draw_x_dotted_line+0x36>
		{
			LCD_write_adr(i, y);
     740:	c8 01       	movw	r24, r16
     742:	b6 01       	movw	r22, r12
     744:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_write_adr>
			LCD_write_data(color);
     748:	8f 2d       	mov	r24, r15
     74a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_write_data>
	}
}
void LCD_draw_x_dotted_line(char color, int y, int length) //rita en streckad linje på höjd y med längd length
{
	
	for (int i = 0; i < length; i++)
     74e:	0f 5f       	subi	r16, 0xFF	; 255
     750:	1f 4f       	sbci	r17, 0xFF	; 255
     752:	0c 17       	cp	r16, r28
     754:	1d 07       	cpc	r17, r29
     756:	79 f7       	brne	.-34     	; 0x736 <LCD_draw_x_dotted_line+0x1e>
			LCD_write_adr(i, y);
			LCD_write_data(color);
		}
		
	}
}
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	ff 90       	pop	r15
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	08 95       	ret

00000768 <usart_init>:
void usart_prstr(char *s);


void usart_init(unsigned int ubrr)
{
	UBRR0H = (unsigned char) (ubrr>>8); //Sätt rätt baudrate utifrån den definierade MYUBRR
     768:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
     76c:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1<<RXEN0) | (1<<TXEN0)| (0<<TXCIE0)| (1<<RXCIE0); //enable transmitter och receiver
     770:	88 e9       	ldi	r24, 0x98	; 152
     772:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0) | (1<<UCSZ00) | (1<<UCSZ01); //8 data bitar 1 stop bit
     776:	8e e0       	ldi	r24, 0x0E	; 14
     778:	80 93 c2 00 	sts	0x00C2, r24
}
     77c:	08 95       	ret

0000077e <usart_putchar>:

void usart_putchar(char data)
{
	while(!(UCSR0A & (1<<UDRE0))) ; //Kollar transmission buffer empty flag UDRE0 i UCSR0A
     77e:	e0 ec       	ldi	r30, 0xC0	; 192
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	90 81       	ld	r25, Z
     784:	95 ff       	sbrs	r25, 5
     786:	fd cf       	rjmp	.-6      	; 0x782 <usart_putchar+0x4>
	UDR0 = data;	
     788:	80 93 c6 00 	sts	0x00C6, r24
}
     78c:	08 95       	ret

0000078e <usart_getchar>:

char usart_getchar(void)
{
	while(!(UCSR0A & (1<<RXC0))) ; //Kollar receive complete bit
     78e:	e0 ec       	ldi	r30, 0xC0	; 192
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	88 23       	and	r24, r24
     796:	ec f7       	brge	.-6      	; 0x792 <usart_getchar+0x4>
	return UDR0;
     798:	80 91 c6 00 	lds	r24, 0x00C6
}
     79c:	08 95       	ret

0000079e <usart_prstr>:

void usart_prstr(char *s)  //Skriver ut en sträng
{
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	ec 01       	movw	r28, r24
	while(*s)
     7a4:	88 81       	ld	r24, Y
     7a6:	88 23       	and	r24, r24
     7a8:	31 f0       	breq	.+12     	; 0x7b6 <usart_prstr+0x18>
{
	while(!(UCSR0A & (1<<RXC0))) ; //Kollar receive complete bit
	return UDR0;
}

void usart_prstr(char *s)  //Skriver ut en sträng
     7aa:	21 96       	adiw	r28, 0x01	; 1
{
	while(*s)
	{
		usart_putchar(*s); //Skriv ut bokstaven
     7ac:	0e 94 bf 03 	call	0x77e	; 0x77e <usart_putchar>
	return UDR0;
}

void usart_prstr(char *s)  //Skriver ut en sträng
{
	while(*s)
     7b0:	89 91       	ld	r24, Y+
     7b2:	88 23       	and	r24, r24
     7b4:	d9 f7       	brne	.-10     	; 0x7ac <usart_prstr+0xe>
	{
		usart_putchar(*s); //Skriv ut bokstaven
		s++; //Öka char-pointern
	}
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <__vector_18>:
static char strbuf[6] = "S";		//buffer för strängjämförelse

int high_alarm_level, low_alarm_level = 0;

ISR(USART_RX_vect)
{
     7bc:	1f 92       	push	r1
     7be:	0f 92       	push	r0
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	0f 92       	push	r0
     7c4:	11 24       	eor	r1, r1
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	1f 93       	push	r17
     7cc:	2f 93       	push	r18
     7ce:	3f 93       	push	r19
     7d0:	4f 93       	push	r20
     7d2:	5f 93       	push	r21
     7d4:	6f 93       	push	r22
     7d6:	7f 93       	push	r23
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	af 93       	push	r26
     7de:	bf 93       	push	r27
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ef 93       	push	r30
     7e6:	ff 93       	push	r31
	if(point == bufferlen - 1)
     7e8:	80 91 c8 03 	lds	r24, 0x03C8
     7ec:	90 91 c9 03 	lds	r25, 0x03C9
     7f0:	8f 34       	cpi	r24, 0x4F	; 79
     7f2:	91 05       	cpc	r25, r1
     7f4:	21 f4       	brne	.+8      	; 0x7fe <__vector_18+0x42>
	{
		point = 0;
     7f6:	10 92 c9 03 	sts	0x03C9, r1
     7fa:	10 92 c8 03 	sts	0x03C8, r1
	}
	buffer[point] = UDR0;
     7fe:	c0 91 c8 03 	lds	r28, 0x03C8
     802:	d0 91 c9 03 	lds	r29, 0x03C9
     806:	10 91 c6 00 	lds	r17, 0x00C6
     80a:	fe 01       	movw	r30, r28
     80c:	e4 53       	subi	r30, 0x34	; 52
     80e:	fc 4f       	sbci	r31, 0xFC	; 252
     810:	10 83       	st	Z, r17
	
	point++;
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	90 93 c9 03 	sts	0x03C9, r25
     81a:	80 93 c8 03 	sts	0x03C8, r24
	
	strbuf[0] = buffer[point-9];		//kopiera till fast minnesadress
     81e:	df 01       	movw	r26, r30
     820:	18 97       	sbiw	r26, 0x08	; 8
     822:	8c 91       	ld	r24, X
     824:	80 93 bd 03 	sts	0x03BD, r24
	strbuf[1] = buffer[point-8];
     828:	df 01       	movw	r26, r30
     82a:	17 97       	sbiw	r26, 0x07	; 7
     82c:	8c 91       	ld	r24, X
     82e:	80 93 be 03 	sts	0x03BE, r24
	strbuf[2] = buffer[point-7];
     832:	df 01       	movw	r26, r30
     834:	16 97       	sbiw	r26, 0x06	; 6
     836:	8c 91       	ld	r24, X
     838:	80 93 bf 03 	sts	0x03BF, r24
	strbuf[3] = buffer[point-6];
     83c:	df 01       	movw	r26, r30
     83e:	15 97       	sbiw	r26, 0x05	; 5
     840:	8c 91       	ld	r24, X
     842:	80 93 c0 03 	sts	0x03C0, r24
	strbuf[4] = buffer[point-5];
     846:	34 97       	sbiw	r30, 0x04	; 4
     848:	80 81       	ld	r24, Z
     84a:	80 93 c1 03 	sts	0x03C1, r24
	

	
	if(strncmp("SUPER", strbuf, 5) == 0)
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	6d eb       	ldi	r22, 0xBD	; 189
     854:	73 e0       	ldi	r23, 0x03	; 3
     856:	45 e0       	ldi	r20, 0x05	; 5
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	0e 94 89 0c 	call	0x1912	; 0x1912 <strncmp>
     85e:	28 2f       	mov	r18, r24
     860:	39 2f       	mov	r19, r25
     862:	21 15       	cp	r18, r1
     864:	31 05       	cpc	r19, r1
     866:	09 f0       	breq	.+2      	; 0x86a <__vector_18+0xae>
     868:	49 c0       	rjmp	.+146    	; 0x8fc <__vector_18+0x140>
	{

		signed int mem_place   = ( (signed char) buffer[point-4] ) << 8;
     86a:	ce 01       	movw	r24, r28
     86c:	84 53       	subi	r24, 0x34	; 52
     86e:	9c 4f       	sbci	r25, 0xFC	; 252
     870:	fc 01       	movw	r30, r24
     872:	33 97       	sbiw	r30, 0x03	; 3
     874:	c0 81       	ld	r28, Z
     876:	dd 27       	eor	r29, r29
     878:	c7 fd       	sbrc	r28, 7
     87a:	d0 95       	com	r29
     87c:	dc 2f       	mov	r29, r28
     87e:	cc 27       	eor	r28, r28
		mem_place			  += (unsigned char) buffer[point-3];
     880:	fc 01       	movw	r30, r24
     882:	32 97       	sbiw	r30, 0x02	; 2
     884:	20 81       	ld	r18, Z
     886:	c2 0f       	add	r28, r18
     888:	d1 1d       	adc	r29, r1
		
		signed int temp_value = ( (signed char ) buffer[point-2] ) << 8;
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	fc 01       	movw	r30, r24
     88e:	60 81       	ld	r22, Z
		temp_value			  += (unsigned char) buffer[point-1];
			
		if (mem_place < arr_length)
     890:	c9 36       	cpi	r28, 0x69	; 105
     892:	d1 05       	cpc	r29, r1
     894:	3c f5       	brge	.+78     	; 0x8e4 <__vector_18+0x128>
	{

		signed int mem_place   = ( (signed char) buffer[point-4] ) << 8;
		mem_place			  += (unsigned char) buffer[point-3];
		
		signed int temp_value = ( (signed char ) buffer[point-2] ) << 8;
     896:	77 27       	eor	r23, r23
     898:	67 fd       	sbrc	r22, 7
     89a:	70 95       	com	r23
     89c:	76 2f       	mov	r23, r22
     89e:	66 27       	eor	r22, r22
		temp_value			  += (unsigned char) buffer[point-1];
			
		if (mem_place < arr_length)
		{
			arr[mem_place] = temp_value / 128.0;
     8a0:	ce 01       	movw	r24, r28
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	0f 2e       	mov	r0, r31
     8ac:	fc e1       	ldi	r31, 0x1C	; 28
     8ae:	ef 2e       	mov	r14, r31
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	ff 2e       	mov	r15, r31
     8b4:	f0 2d       	mov	r31, r0
     8b6:	e8 0e       	add	r14, r24
     8b8:	f9 1e       	adc	r15, r25

		signed int mem_place   = ( (signed char) buffer[point-4] ) << 8;
		mem_place			  += (unsigned char) buffer[point-3];
		
		signed int temp_value = ( (signed char ) buffer[point-2] ) << 8;
		temp_value			  += (unsigned char) buffer[point-1];
     8ba:	61 0f       	add	r22, r17
     8bc:	71 1d       	adc	r23, r1
			
		if (mem_place < arr_length)
		{
			arr[mem_place] = temp_value / 128.0;
     8be:	88 27       	eor	r24, r24
     8c0:	77 fd       	sbrc	r23, 7
     8c2:	80 95       	com	r24
     8c4:	98 2f       	mov	r25, r24
     8c6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	5c e3       	ldi	r21, 0x3C	; 60
     8d2:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__mulsf3>
     8d6:	dc 01       	movw	r26, r24
     8d8:	cb 01       	movw	r24, r22
     8da:	f7 01       	movw	r30, r14
     8dc:	80 83       	st	Z, r24
     8de:	91 83       	std	Z+1, r25	; 0x01
     8e0:	a2 83       	std	Z+2, r26	; 0x02
     8e2:	b3 83       	std	Z+3, r27	; 0x03
		}
		

		connected = true;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 93 c7 03 	sts	0x03C7, r24
		
		point = 0;	//nollställ pekare
     8ea:	10 92 c9 03 	sts	0x03C9, r1
     8ee:	10 92 c8 03 	sts	0x03C8, r1
		if (mem_place > arr_length - 2)
     8f2:	c8 36       	cpi	r28, 0x68	; 104
     8f4:	d1 05       	cpc	r29, r1
     8f6:	14 f0       	brlt	.+4      	; 0x8fc <__vector_18+0x140>
		{
			update_graph_flag = true;
     8f8:	80 93 c6 03 	sts	0x03C6, r24
		
	}

	
	
}
     8fc:	ff 91       	pop	r31
     8fe:	ef 91       	pop	r30
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	1f 91       	pop	r17
     91a:	ff 90       	pop	r15
     91c:	ef 90       	pop	r14
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti

00000928 <compare_input>:
bool compare_input(char * CompareString, int length, int offset)
{
	int bufPos = point - length - offset; //Startposition i buffer
     928:	a0 91 c8 03 	lds	r26, 0x03C8
     92c:	b0 91 c9 03 	lds	r27, 0x03C9
	
	for(int i = 0; i < length; i++) //Position i CompareString
     930:	16 16       	cp	r1, r22
     932:	17 06       	cpc	r1, r23
     934:	e4 f4       	brge	.+56     	; 0x96e <compare_input+0x46>
	
	
}
bool compare_input(char * CompareString, int length, int offset)
{
	int bufPos = point - length - offset; //Startposition i buffer
     936:	a6 1b       	sub	r26, r22
     938:	b7 0b       	sbc	r27, r23
     93a:	a4 1b       	sub	r26, r20
     93c:	b5 0b       	sbc	r27, r21
	
	for(int i = 0; i < length; i++) //Position i CompareString
	{
		if( buffer[bufPos] != CompareString[i] ) 
     93e:	fd 01       	movw	r30, r26
     940:	e4 53       	subi	r30, 0x34	; 52
     942:	fc 4f       	sbci	r31, 0xFC	; 252
     944:	30 81       	ld	r19, Z
     946:	fc 01       	movw	r30, r24
     948:	20 81       	ld	r18, Z
     94a:	32 17       	cp	r19, r18
     94c:	91 f4       	brne	.+36     	; 0x972 <compare_input+0x4a>
	}

	
	
}
bool compare_input(char * CompareString, int length, int offset)
     94e:	a3 53       	subi	r26, 0x33	; 51
     950:	bc 4f       	sbci	r27, 0xFC	; 252
     952:	31 96       	adiw	r30, 0x01	; 1
{
	int bufPos = point - length - offset; //Startposition i buffer
	
	for(int i = 0; i < length; i++) //Position i CompareString
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	04 c0       	rjmp	.+8      	; 0x962 <compare_input+0x3a>
	{
		if( buffer[bufPos] != CompareString[i] ) 
     95a:	3d 91       	ld	r19, X+
     95c:	21 91       	ld	r18, Z+
     95e:	32 17       	cp	r19, r18
     960:	51 f4       	brne	.+20     	; 0x976 <compare_input+0x4e>
}
bool compare_input(char * CompareString, int length, int offset)
{
	int bufPos = point - length - offset; //Startposition i buffer
	
	for(int i = 0; i < length; i++) //Position i CompareString
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	86 17       	cp	r24, r22
     966:	97 07       	cpc	r25, r23
     968:	c1 f7       	brne	.-16     	; 0x95a <compare_input+0x32>
		{ //Om de två bokstäverna inte stämmer överrens
			return false;
		}		
		bufPos++;
	}
return true;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	08 95       	ret
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	08 95       	ret
	
	for(int i = 0; i < length; i++) //Position i CompareString
	{
		if( buffer[bufPos] != CompareString[i] ) 
		{ //Om de två bokstäverna inte stämmer överrens
			return false;
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	08 95       	ret
     976:	80 e0       	ldi	r24, 0x00	; 0
		}		
		bufPos++;
	}
return true;
}
     978:	08 95       	ret

0000097a <button_press>:
	usart_prstr("AT+btscan,3,0\r");
	//usart_prstr("AT+setesc,++\r");
}
bool button_press(char Button)
{
	if (~PINC & Button)
     97a:	46 b1       	in	r20, 0x06	; 6
     97c:	28 2f       	mov	r18, r24
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	40 95       	com	r20
     984:	50 95       	com	r21
     986:	24 23       	and	r18, r20
     988:	35 23       	and	r19, r21
	
	disp_all(white);	//Y
	usart_prstr("AT+btscan,3,0\r");
	//usart_prstr("AT+setesc,++\r");
}
bool button_press(char Button)
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	21 15       	cp	r18, r1
     98e:	31 05       	cpc	r19, r1
     990:	09 f4       	brne	.+2      	; 0x994 <button_press+0x1a>
     992:	80 e0       	ldi	r24, 0x00	; 0
	if (~PINC & Button)
	{
		return true;
	}
	return false;
}
     994:	08 95       	ret

00000996 <button_press_once>:
bool button_press_once(char Button)
{
	static char buttons;		//spara förra lägen här
	
	if (( ~PINC & Button ) != ( ~buttons & Button ))		//jämför och kolla om det är skillnad
     996:	66 b1       	in	r22, 0x06	; 6
     998:	48 2f       	mov	r20, r24
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	20 91 c0 05 	lds	r18, 0x05C0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	26 27       	eor	r18, r22
     9a6:	37 27       	eor	r19, r23
     9a8:	ca 01       	movw	r24, r20
     9aa:	82 23       	and	r24, r18
     9ac:	93 23       	and	r25, r19
     9ae:	00 97       	sbiw	r24, 0x00	; 0
     9b0:	29 f0       	breq	.+10     	; 0x9bc <button_press_once+0x26>
	{
		buttons = PINC;
     9b2:	86 b1       	in	r24, 0x06	; 6
     9b4:	80 93 c0 05 	sts	0x05C0, r24
		return true;		//sant isåfall
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	08 95       	ret
	}
	buttons = PINC;
     9bc:	86 b1       	in	r24, 0x06	; 6
     9be:	80 93 c0 05 	sts	0x05C0, r24
	
	return false;
     9c2:	80 e0       	ldi	r24, 0x00	; 0
}
     9c4:	08 95       	ret

000009c6 <sound_on>:
				
		}	
    }
}
void sound_on(){
	PORTD |= summer;
     9c6:	5b 9a       	sbi	0x0b, 3	; 11
}	
     9c8:	08 95       	ret

000009ca <sound_off>:
void sound_off(){
	PORTD &= ~summer;
     9ca:	5b 98       	cbi	0x0b, 3	; 11
}
     9cc:	08 95       	ret

000009ce <sound_toggle>:
void sound_toggle(){
	PORTD = ( PORTD ^ summer);
     9ce:	9b b1       	in	r25, 0x0b	; 11
     9d0:	88 e0       	ldi	r24, 0x08	; 8
     9d2:	89 27       	eor	r24, r25
     9d4:	8b b9       	out	0x0b, r24	; 11
}
     9d6:	08 95       	ret

000009d8 <bt_reset>:

void bt_reset()
{
	PORTD &= ~bt_reset_pin;
     9d8:	5a 98       	cbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9da:	8f e1       	ldi	r24, 0x1F	; 31
     9dc:	9e e4       	ldi	r25, 0x4E	; 78
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <bt_reset+0x6>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <bt_reset+0xc>
     9e4:	00 00       	nop
	_delay_ms(10);
	PORTD |= bt_reset_pin;
     9e6:	5a 9a       	sbi	0x0b, 2	; 11
}
     9e8:	08 95       	ret

000009ea <setup>:
	}
return true;
}
void setup()
{
	DDRC = 0;		//inputs
     9ea:	17 b8       	out	0x07, r1	; 7
	PORTC = 255;	//inputs
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	88 b9       	out	0x08, r24	; 8
	
	DDRB = 0xff;
     9f0:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff;
     9f2:	8a b9       	out	0x0a, r24	; 10
	
	bt_reset();
     9f4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <bt_reset>
	
	high_alarm_level = eeprom_read_word(alarm_eeprom_adr);		//läs nivåer från eeprom
     9f8:	85 e0       	ldi	r24, 0x05	; 5
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 97 0c 	call	0x192e	; 0x192e <__eerd_word_m328p>
     a00:	90 93 cb 05 	sts	0x05CB, r25
     a04:	80 93 ca 05 	sts	0x05CA, r24
	low_alarm_level = eeprom_read_word(alarm_eeprom_adr + 2);
     a08:	87 e0       	ldi	r24, 0x07	; 7
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 97 0c 	call	0x192e	; 0x192e <__eerd_word_m328p>
     a10:	90 93 c5 03 	sts	0x03C5, r25
     a14:	80 93 c4 03 	sts	0x03C4, r24
	
	sei();
     a18:	78 94       	sei
	usart_init(MYUBRR);	//hårdvaru uart
     a1a:	83 e3       	ldi	r24, 0x33	; 51
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 b4 03 	call	0x768	; 0x768 <usart_init>
	
	init_serial();		//mjukvaru uart
     a22:	0e 94 53 00 	call	0xa6	; 0xa6 <init_serial>
	
	
	disp_all(white);	//Y
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	0e 94 6e 01 	call	0x2dc	; 0x2dc <disp_all>
	usart_prstr("AT+btscan,3,0\r");
     a2c:	86 e0       	ldi	r24, 0x06	; 6
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 cf 03 	call	0x79e	; 0x79e <usart_prstr>
	//usart_prstr("AT+setesc,++\r");
}
     a34:	08 95       	ret

00000a36 <float_to_str>:
	//restore
	UCSR0B |= (1 << RXCIE0); 
}

char * float_to_str(float num)
{
     a36:	9f 92       	push	r9
     a38:	af 92       	push	r10
     a3a:	bf 92       	push	r11
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
	static char buffer[9];
	int intnum = num*10;	//konvertera till int
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	40 e2       	ldi	r20, 0x20	; 32
     a52:	51 e4       	ldi	r21, 0x41	; 65
     a54:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__mulsf3>
     a58:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixsfsi>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	7c 01       	movw	r14, r24
	int insert_zero = 100;	//när ska vi skriva nollor efter tal?
	
	int i = 0;
	if (intnum < 0)		//lägg till minustecken
     a62:	99 23       	and	r25, r25
     a64:	54 f4       	brge	.+20     	; 0xa7a <float_to_str+0x44>
	{
		buffer[i] = '-';
     a66:	8d e2       	ldi	r24, 0x2D	; 45
     a68:	80 93 c1 05 	sts	0x05C1, r24
		i++;
		intnum = -intnum;
     a6c:	f0 94       	com	r15
     a6e:	e1 94       	neg	r14
     a70:	f1 08       	sbc	r15, r1
     a72:	f3 94       	inc	r15
	
	int i = 0;
	if (intnum < 0)		//lägg till minustecken
	{
		buffer[i] = '-';
		i++;
     a74:	c1 e0       	ldi	r28, 0x01	; 1
     a76:	d0 e0       	ldi	r29, 0x00	; 0
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <float_to_str+0x48>
{
	static char buffer[9];
	int intnum = num*10;	//konvertera till int
	int insert_zero = 100;	//när ska vi skriva nollor efter tal?
	
	int i = 0;
     a7a:	c0 e0       	ldi	r28, 0x00	; 0
     a7c:	d0 e0       	ldi	r29, 0x00	; 0
	if (intnum < 0)		//lägg till minustecken
	{
		buffer[i] = '-';
		i++;
     a7e:	05 e0       	ldi	r16, 0x05	; 5
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	20 e1       	ldi	r18, 0x10	; 16
     a84:	37 e2       	ldi	r19, 0x27	; 39
     a86:	0f 2e       	mov	r0, r31
     a88:	f4 e6       	ldi	r31, 0x64	; 100
     a8a:	af 2e       	mov	r10, r31
     a8c:	bb 24       	eor	r11, r11
     a8e:	f0 2d       	mov	r31, r0
			if (j == 1)
			{
				buffer[i] = ',';
				i++;
			}
			buffer[i] = intnum / j  + 48;
     a90:	0f 2e       	mov	r0, r31
     a92:	f1 ec       	ldi	r31, 0xC1	; 193
     a94:	cf 2e       	mov	r12, r31
     a96:	f5 e0       	ldi	r31, 0x05	; 5
     a98:	df 2e       	mov	r13, r31
     a9a:	f0 2d       	mov	r31, r0
		
		if (intnum >= j || j < insert_zero)	
		{
			if (j == 1)
			{
				buffer[i] = ',';
     a9c:	0f 2e       	mov	r0, r31
     a9e:	fc e2       	ldi	r31, 0x2C	; 44
     aa0:	9f 2e       	mov	r9, r31
     aa2:	f0 2d       	mov	r31, r0
	}
	
	for (int j = 10000;j >= 1; j /= 10.0 )	//loopa igenom tal och skapa nummer
	{
		
		if (intnum >= j || j < insert_zero)	
     aa4:	e2 16       	cp	r14, r18
     aa6:	f3 06       	cpc	r15, r19
     aa8:	1c f4       	brge	.+6      	; 0xab0 <float_to_str+0x7a>
     aaa:	2a 15       	cp	r18, r10
     aac:	3b 05       	cpc	r19, r11
     aae:	ac f4       	brge	.+42     	; 0xada <float_to_str+0xa4>
		{
			if (j == 1)
     ab0:	21 30       	cpi	r18, 0x01	; 1
     ab2:	31 05       	cpc	r19, r1
     ab4:	29 f4       	brne	.+10     	; 0xac0 <float_to_str+0x8a>
			{
				buffer[i] = ',';
     ab6:	f6 01       	movw	r30, r12
     ab8:	ec 0f       	add	r30, r28
     aba:	fd 1f       	adc	r31, r29
     abc:	90 82       	st	Z, r9
				i++;
     abe:	21 96       	adiw	r28, 0x01	; 1
			}
			buffer[i] = intnum / j  + 48;
     ac0:	f6 01       	movw	r30, r12
     ac2:	ec 0f       	add	r30, r28
     ac4:	fd 1f       	adc	r31, r29
     ac6:	c7 01       	movw	r24, r14
     ac8:	b9 01       	movw	r22, r18
     aca:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__divmodhi4>
     ace:	60 5d       	subi	r22, 0xD0	; 208
     ad0:	60 83       	st	Z, r22
			i++;
     ad2:	21 96       	adiw	r28, 0x01	; 1
			
			intnum = intnum % j ;
     ad4:	e8 2e       	mov	r14, r24
     ad6:	f9 2e       	mov	r15, r25
     ad8:	59 01       	movw	r10, r18
		buffer[i] = '-';
		i++;
		intnum = -intnum;
	}
	
	for (int j = 10000;j >= 1; j /= 10.0 )	//loopa igenom tal och skapa nummer
     ada:	b9 01       	movw	r22, r18
     adc:	88 27       	eor	r24, r24
     ade:	77 fd       	sbrc	r23, 7
     ae0:	80 95       	com	r24
     ae2:	98 2f       	mov	r25, r24
     ae4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e2       	ldi	r20, 0x20	; 32
     aee:	51 e4       	ldi	r21, 0x41	; 65
     af0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divsf3>
     af4:	46 2f       	mov	r20, r22
     af6:	57 2f       	mov	r21, r23
     af8:	68 2f       	mov	r22, r24
     afa:	79 2f       	mov	r23, r25
     afc:	cb 01       	movw	r24, r22
     afe:	ba 01       	movw	r22, r20
     b00:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixsfsi>
     b04:	9b 01       	movw	r18, r22
     b06:	01 50       	subi	r16, 0x01	; 1
     b08:	10 40       	sbci	r17, 0x00	; 0
     b0a:	61 f6       	brne	.-104    	; 0xaa4 <float_to_str+0x6e>
			intnum = intnum % j ;
			insert_zero = j;	//efter vi skrivit en siffra skriver vi alltid nollor efter
			
		}
	}
	buffer[i++] = ' ';	//ett mellanslag för att kompensera för skiftande längd på strängen
     b0c:	81 ec       	ldi	r24, 0xC1	; 193
     b0e:	95 e0       	ldi	r25, 0x05	; 5
     b10:	c8 0f       	add	r28, r24
     b12:	d9 1f       	adc	r29, r25
     b14:	20 e2       	ldi	r18, 0x20	; 32
     b16:	28 83       	st	Y, r18
	buffer[i] = 0; // skriv en nolla till buffer för att markera slut på strängen
     b18:	19 82       	std	Y+1, r1	; 0x01
	
	return buffer;
	
}
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	bf 90       	pop	r11
     b2c:	af 90       	pop	r10
     b2e:	9f 90       	pop	r9
     b30:	08 95       	ret

00000b32 <send_data_CSV>:
	_delay_ms(10);
	PORTD |= bt_reset_pin;
}

void send_data_CSV()	//skicka data på soft serial i csvformat
{
     b32:	cf 92       	push	r12
     b34:	df 92       	push	r13
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
	//disable other interrupts
	UCSR0B &= ~(1 << RXCIE0); 
     b42:	e1 ec       	ldi	r30, 0xC1	; 193
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 77       	andi	r24, 0x7F	; 127
     b4a:	80 83       	st	Z, r24
	//Visa notis på skärmen
	LCD_write_string("Skickar data.", black, 240, 50);
     b4c:	85 e1       	ldi	r24, 0x15	; 21
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	40 ef       	ldi	r20, 0xF0	; 240
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	22 e3       	ldi	r18, 0x32	; 50
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_write_string>
	
	//startsignal
	send_string("\n\rstart\n\r");	
     b5e:	83 e2       	ldi	r24, 0x23	; 35
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_string>
     b66:	0c e1       	ldi	r16, 0x1C	; 28
     b68:	14 e0       	ldi	r17, 0x04	; 4
	//loop data
	for (int i = 0; i < arr_length; i++)
     b6a:	c0 e0       	ldi	r28, 0x00	; 0
     b6c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		send_string("Jimmy vill ha mera utfyllnad!  Mycket data");		//precist konfigurerad data att skicka
     b6e:	0f 2e       	mov	r0, r31
     b70:	fd e2       	ldi	r31, 0x2D	; 45
     b72:	ef 2e       	mov	r14, r31
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	ff 2e       	mov	r15, r31
     b78:	f0 2d       	mov	r31, r0
		send_string(float_to_str(i));
		send_char(';');
		send_string(float_to_str(arr[i]));
		send_string("\n\r");
     b7a:	0f 2e       	mov	r0, r31
     b7c:	f8 e5       	ldi	r31, 0x58	; 88
     b7e:	cf 2e       	mov	r12, r31
     b80:	f1 e0       	ldi	r31, 0x01	; 1
     b82:	df 2e       	mov	r13, r31
     b84:	f0 2d       	mov	r31, r0
	//startsignal
	send_string("\n\rstart\n\r");	
	//loop data
	for (int i = 0; i < arr_length; i++)
	{
		send_string("Jimmy vill ha mera utfyllnad!  Mycket data");		//precist konfigurerad data att skicka
     b86:	c7 01       	movw	r24, r14
     b88:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_string>
		send_string(float_to_str(i));
     b8c:	be 01       	movw	r22, r28
     b8e:	88 27       	eor	r24, r24
     b90:	77 fd       	sbrc	r23, 7
     b92:	80 95       	com	r24
     b94:	98 2f       	mov	r25, r24
     b96:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     b9a:	0e 94 1b 05 	call	0xa36	; 0xa36 <float_to_str>
     b9e:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_string>
		send_char(';');
     ba2:	8b e3       	ldi	r24, 0x3B	; 59
     ba4:	0e 94 61 00 	call	0xc2	; 0xc2 <send_char>
		send_string(float_to_str(arr[i]));
     ba8:	f8 01       	movw	r30, r16
     baa:	61 91       	ld	r22, Z+
     bac:	71 91       	ld	r23, Z+
     bae:	81 91       	ld	r24, Z+
     bb0:	91 91       	ld	r25, Z+
     bb2:	8f 01       	movw	r16, r30
     bb4:	0e 94 1b 05 	call	0xa36	; 0xa36 <float_to_str>
     bb8:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_string>
		send_string("\n\r");
     bbc:	c6 01       	movw	r24, r12
     bbe:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_string>
	LCD_write_string("Skickar data.", black, 240, 50);
	
	//startsignal
	send_string("\n\rstart\n\r");	
	//loop data
	for (int i = 0; i < arr_length; i++)
     bc2:	21 96       	adiw	r28, 0x01	; 1
     bc4:	c9 36       	cpi	r28, 0x69	; 105
     bc6:	d1 05       	cpc	r29, r1
     bc8:	f1 f6       	brne	.-68     	; 0xb86 <send_data_CSV+0x54>
		send_char(';');
		send_string(float_to_str(arr[i]));
		send_string("\n\r");
	}
	//stopsignal
	send_string("stop\n\r");
     bca:	8b e5       	ldi	r24, 0x5B	; 91
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_string>
	//ta bort notis på skärmen
	LCD_write_string("             ", black, 240, 50);
     bd2:	82 e6       	ldi	r24, 0x62	; 98
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	40 ef       	ldi	r20, 0xF0	; 240
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	22 e3       	ldi	r18, 0x32	; 50
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_write_string>
	//restore
	UCSR0B |= (1 << RXCIE0); 
     be4:	e1 ec       	ldi	r30, 0xC1	; 193
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 68       	ori	r24, 0x80	; 128
     bec:	80 83       	st	Z, r24
}
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	df 90       	pop	r13
     bfc:	cf 90       	pop	r12
     bfe:	08 95       	ret

00000c00 <LCD_draw_graph>:
{
	return even_nums(num,10); 
}

void LCD_draw_graph(char color, int y_offset, float y_graph_size, float * arr, int x_width)		//rita en graf på skärmen 
{
     c00:	2f 92       	push	r2
     c02:	3f 92       	push	r3
     c04:	4f 92       	push	r4
     c06:	5f 92       	push	r5
     c08:	6f 92       	push	r6
     c0a:	7f 92       	push	r7
     c0c:	8f 92       	push	r8
     c0e:	9f 92       	push	r9
     c10:	af 92       	push	r10
     c12:	bf 92       	push	r11
     c14:	cf 92       	push	r12
     c16:	df 92       	push	r13
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	a7 97       	sbiw	r28, 0x27	; 39
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	8d 83       	std	Y+5, r24	; 0x05
     c36:	7f a3       	lds	r23, 0x5f
     c38:	6e a3       	lds	r22, 0x5e
     c3a:	49 01       	movw	r8, r18
     c3c:	5a 01       	movw	r10, r20
     c3e:	fa 82       	std	Y+2, r15	; 0x02
     c40:	e9 82       	std	Y+1, r14	; 0x01
	int bottom =  y_offset + y_graph_size;
     c42:	9b 01       	movw	r18, r22
     c44:	b9 01       	movw	r22, r18
     c46:	88 27       	eor	r24, r24
     c48:	77 fd       	sbrc	r23, 7
     c4a:	80 95       	com	r24
     c4c:	98 2f       	mov	r25, r24
     c4e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     c52:	a5 01       	movw	r20, r10
     c54:	94 01       	movw	r18, r8
     c56:	0e 94 48 0a 	call	0x1490	; 0x1490 <__addsf3>
     c5a:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixsfsi>
     c5e:	6b 01       	movw	r12, r22
     c60:	7c 01       	movw	r14, r24
     c62:	1b 01       	movw	r2, r22
	float topvalue = arr[0], bottomvalue = arr[0];
     c64:	d8 01       	movw	r26, r16
     c66:	bc 91       	ld	r27, X
     c68:	b9 87       	std	Y+9, r27	; 0x09
     c6a:	f8 01       	movw	r30, r16
     c6c:	f1 81       	ldd	r31, Z+1	; 0x01
     c6e:	fd 87       	std	Y+13, r31	; 0x0d
     c70:	d8 01       	movw	r26, r16
     c72:	12 96       	adiw	r26, 0x02	; 2
     c74:	bc 91       	ld	r27, X
     c76:	be 87       	std	Y+14, r27	; 0x0e
     c78:	f8 01       	movw	r30, r16
     c7a:	f3 81       	ldd	r31, Z+3	; 0x03
     c7c:	ff 87       	std	Y+15, r31	; 0x0f
	
	#define top_bottom_offset 2	//offset mot top och botten för snyggare graf


	char graph_width = x_width * 2;		//en grej som ger finare graph, i väntan på standardisering
     c7e:	29 81       	ldd	r18, Y+1	; 0x01
     c80:	22 0f       	add	r18, r18
     c82:	29 a3       	lds	r18, 0x59


	LCD_draw_x_line(0x00, y_offset, graph_width );		//rita outline
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	6e a1       	lds	r22, 0x4e
     c88:	7f a1       	lds	r23, 0x4f
     c8a:	42 2f       	mov	r20, r18
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_draw_x_line>
	LCD_draw_x_line(0x00, bottom, graph_width );	
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	b6 01       	movw	r22, r12
     c96:	49 a1       	lds	r20, 0x49
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_draw_x_line>
	
	
	//loop för att hitta topp och bottenvärden
	for (int i = 0; i < x_width; i++)
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	9a 81       	ldd	r25, Y+2	; 0x02
     ca2:	18 16       	cp	r1, r24
     ca4:	19 06       	cpc	r1, r25
     ca6:	0c f0       	brlt	.+2      	; 0xcaa <LCD_draw_graph+0xaa>
     ca8:	17 c2       	rjmp	.+1070   	; 0x10d8 <LCD_draw_graph+0x4d8>
     caa:	18 87       	std	Y+8, r17	; 0x08
     cac:	0f 83       	std	Y+7, r16	; 0x07
}

void LCD_draw_graph(char color, int y_offset, float y_graph_size, float * arr, int x_width)		//rita en graf på skärmen 
{
	int bottom =  y_offset + y_graph_size;
	float topvalue = arr[0], bottomvalue = arr[0];
     cae:	99 85       	ldd	r25, Y+9	; 0x09
     cb0:	98 8b       	std	Y+16, r25	; 0x10
     cb2:	ed 84       	ldd	r14, Y+13	; 0x0d
     cb4:	4e 84       	ldd	r4, Y+14	; 0x0e
     cb6:	5f 84       	ldd	r5, Y+15	; 0x0f
	LCD_draw_x_line(0x00, y_offset, graph_width );		//rita outline
	LCD_draw_x_line(0x00, bottom, graph_width );	
	
	
	//loop för att hitta topp och bottenvärden
	for (int i = 0; i < x_width; i++)
     cb8:	cc 24       	eor	r12, r12
     cba:	dd 24       	eor	r13, r13
     cbc:	3a 8a       	std	Y+18, r3	; 0x12
     cbe:	29 8a       	std	Y+17, r2	; 0x11
     cc0:	36 01       	movw	r6, r12
     cc2:	1a 8f       	std	Y+26, r17	; 0x1a
     cc4:	09 8f       	std	Y+25, r16	; 0x19
     cc6:	8b 8a       	std	Y+19, r8	; 0x13
     cc8:	9c 8a       	std	Y+20, r9	; 0x14
     cca:	ad 8a       	std	Y+21, r10	; 0x15
     ccc:	be 8a       	std	Y+22, r11	; 0x16
     cce:	99 2e       	mov	r9, r25
     cd0:	ae 2c       	mov	r10, r14
     cd2:	b4 2c       	mov	r11, r4
     cd4:	d5 2c       	mov	r13, r5
     cd6:	29 2e       	mov	r2, r25
     cd8:	3e 2c       	mov	r3, r14
	{
		float temp = arr[i];
     cda:	a9 8d       	ldd	r26, Y+25	; 0x19
     cdc:	ba 8d       	ldd	r27, Y+26	; 0x1a
     cde:	fc 90       	ld	r15, X
     ce0:	11 96       	adiw	r26, 0x01	; 1
     ce2:	ec 90       	ld	r14, X
     ce4:	11 97       	sbiw	r26, 0x01	; 1
     ce6:	12 96       	adiw	r26, 0x02	; 2
     ce8:	cc 90       	ld	r12, X
     cea:	12 97       	sbiw	r26, 0x02	; 2
     cec:	13 96       	adiw	r26, 0x03	; 3
     cee:	8c 90       	ld	r8, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	14 96       	adiw	r26, 0x04	; 4
     cf4:	ba 8f       	std	Y+26, r27	; 0x1a
     cf6:	a9 8f       	std	Y+25, r26	; 0x19
		if (temp > topvalue)
     cf8:	8f 2d       	mov	r24, r15
     cfa:	9e 2d       	mov	r25, r14
     cfc:	ac 2d       	mov	r26, r12
     cfe:	b8 2d       	mov	r27, r8
     d00:	bc 01       	movw	r22, r24
     d02:	cd 01       	movw	r24, r26
     d04:	09 2d       	mov	r16, r9
     d06:	1a 2d       	mov	r17, r10
     d08:	2b 2d       	mov	r18, r11
     d0a:	3d 2d       	mov	r19, r13
     d0c:	a9 01       	movw	r20, r18
     d0e:	98 01       	movw	r18, r16
     d10:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__gesf2>
     d14:	18 16       	cp	r1, r24
     d16:	24 f4       	brge	.+8      	; 0xd20 <LCD_draw_graph+0x120>
		{	
			topvalue = temp;
     d18:	9f 2c       	mov	r9, r15
     d1a:	ae 2c       	mov	r10, r14
     d1c:	bc 2c       	mov	r11, r12
     d1e:	d8 2c       	mov	r13, r8
		}
		if (temp < bottomvalue)
     d20:	8f 2d       	mov	r24, r15
     d22:	9e 2d       	mov	r25, r14
     d24:	ac 2d       	mov	r26, r12
     d26:	b8 2d       	mov	r27, r8
     d28:	bc 01       	movw	r22, r24
     d2a:	cd 01       	movw	r24, r26
     d2c:	02 2d       	mov	r16, r2
     d2e:	13 2d       	mov	r17, r3
     d30:	24 2d       	mov	r18, r4
     d32:	35 2d       	mov	r19, r5
     d34:	a9 01       	movw	r20, r18
     d36:	98 01       	movw	r18, r16
     d38:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__cmpsf2>
     d3c:	88 23       	and	r24, r24
     d3e:	24 f4       	brge	.+8      	; 0xd48 <LCD_draw_graph+0x148>
		{
			bottomvalue = temp;
     d40:	2f 2c       	mov	r2, r15
     d42:	3e 2c       	mov	r3, r14
     d44:	4c 2c       	mov	r4, r12
     d46:	58 2c       	mov	r5, r8
	LCD_draw_x_line(0x00, y_offset, graph_width );		//rita outline
	LCD_draw_x_line(0x00, bottom, graph_width );	
	
	
	//loop för att hitta topp och bottenvärden
	for (int i = 0; i < x_width; i++)
     d48:	08 94       	sec
     d4a:	61 1c       	adc	r6, r1
     d4c:	71 1c       	adc	r7, r1
     d4e:	e9 81       	ldd	r30, Y+1	; 0x01
     d50:	fa 81       	ldd	r31, Y+2	; 0x02
     d52:	6e 16       	cp	r6, r30
     d54:	7f 06       	cpc	r7, r31
     d56:	09 f0       	breq	.+2      	; 0xd5a <LCD_draw_graph+0x15a>
     d58:	c0 cf       	rjmp	.-128    	; 0xcda <LCD_draw_graph+0xda>
     d5a:	99 86       	std	Y+9, r9	; 0x09
     d5c:	ad 86       	std	Y+13, r10	; 0x0d
     d5e:	be 86       	std	Y+14, r11	; 0x0e
     d60:	8b 88       	ldd	r8, Y+19	; 0x13
     d62:	9c 88       	ldd	r9, Y+20	; 0x14
     d64:	ad 88       	ldd	r10, Y+21	; 0x15
     d66:	be 88       	ldd	r11, Y+22	; 0x16
     d68:	df 86       	std	Y+15, r13	; 0x0f
     d6a:	28 8a       	std	Y+16, r2	; 0x10
     d6c:	e3 2c       	mov	r14, r3
     d6e:	29 88       	ldd	r2, Y+17	; 0x11
     d70:	3a 88       	ldd	r3, Y+18	; 0x12
		if (temp < bottomvalue)
		{
			bottomvalue = temp;
		}
	}
	topvalue += top_bottom_offset;		//lägg till en offset för snyggare graf
     d72:	29 85       	ldd	r18, Y+9	; 0x09
     d74:	3d 85       	ldd	r19, Y+13	; 0x0d
     d76:	4e 85       	ldd	r20, Y+14	; 0x0e
     d78:	82 2f       	mov	r24, r18
     d7a:	93 2f       	mov	r25, r19
     d7c:	a4 2f       	mov	r26, r20
     d7e:	bd 2d       	mov	r27, r13
     d80:	bc 01       	movw	r22, r24
     d82:	cd 01       	movw	r24, r26
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	50 e4       	ldi	r21, 0x40	; 64
     d8c:	0e 94 48 0a 	call	0x1490	; 0x1490 <__addsf3>
     d90:	d6 2e       	mov	r13, r22
     d92:	17 2f       	mov	r17, r23
     d94:	08 2f       	mov	r16, r24
     d96:	f9 2e       	mov	r15, r25
     d98:	6a a3       	lds	r22, 0x5a
     d9a:	7b a3       	lds	r23, 0x5b
     d9c:	8c a3       	lds	r24, 0x5c
     d9e:	9d a3       	lds	r25, 0x5d
	bottomvalue -= top_bottom_offset;
     da0:	28 89       	ldd	r18, Y+16	; 0x10
     da2:	82 2f       	mov	r24, r18
     da4:	9e 2d       	mov	r25, r14
     da6:	a4 2d       	mov	r26, r4
     da8:	b5 2d       	mov	r27, r5
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	50 e4       	ldi	r21, 0x40	; 64
     db6:	0e 94 47 0a 	call	0x148e	; 0x148e <__subsf3>
     dba:	56 2f       	mov	r21, r22
     dbc:	47 2f       	mov	r20, r23
     dbe:	38 2f       	mov	r19, r24
     dc0:	29 2f       	mov	r18, r25
     dc2:	6d 87       	std	Y+13, r22	; 0x0d
     dc4:	7e 87       	std	Y+14, r23	; 0x0e
     dc6:	8f 8b       	std	Y+23, r24	; 0x17
     dc8:	98 8f       	std	Y+24, r25	; 0x18
	
	// välj range att använda	
	float range = topvalue - bottomvalue;
     dca:	8d 2d       	mov	r24, r13
     dcc:	91 2f       	mov	r25, r17
     dce:	a0 2f       	mov	r26, r16
     dd0:	bf 2d       	mov	r27, r15
     dd2:	bc 01       	movw	r22, r24
     dd4:	cd 01       	movw	r24, r26
     dd6:	b2 2f       	mov	r27, r18
     dd8:	05 2f       	mov	r16, r21
     dda:	14 2f       	mov	r17, r20
     ddc:	23 2f       	mov	r18, r19
     dde:	3b 2f       	mov	r19, r27
     de0:	a9 01       	movw	r20, r18
     de2:	98 01       	movw	r18, r16
     de4:	0e 94 47 0a 	call	0x148e	; 0x148e <__subsf3>
     de8:	6f 87       	std	Y+15, r22	; 0x0f
     dea:	78 8b       	std	Y+16, r23	; 0x10
     dec:	89 8b       	std	Y+17, r24	; 0x11
     dee:	9b 8b       	std	Y+19, r25	; 0x13
	int grid_scale = range / 3;	//skala grid mot range, rita tre linjer eller fyra
     df0:	37 2f       	mov	r19, r23
     df2:	48 2f       	mov	r20, r24
     df4:	59 2f       	mov	r21, r25
     df6:	86 2f       	mov	r24, r22
     df8:	93 2f       	mov	r25, r19
     dfa:	a4 2f       	mov	r26, r20
     dfc:	b5 2f       	mov	r27, r21
     dfe:	bc 01       	movw	r22, r24
     e00:	cd 01       	movw	r24, r26
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e4       	ldi	r20, 0x40	; 64
     e08:	50 e4       	ldi	r21, 0x40	; 64
     e0a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divsf3>
     e0e:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixsfsi>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	9a 8f       	std	Y+26, r25	; 0x1a
     e18:	89 8f       	std	Y+25, r24	; 0x19
bool even_tens(int num)		//kolla efter jämna tiotal
{
	return even_nums(num,10); 
}

void LCD_draw_graph(char color, int y_offset, float y_graph_size, float * arr, int x_width)		//rita en graf på skärmen 
     e1a:	29 81       	ldd	r18, Y+1	; 0x01
     e1c:	3a 81       	ldd	r19, Y+2	; 0x02
     e1e:	22 0f       	add	r18, r18
     e20:	33 1f       	adc	r19, r19
     e22:	3c 8f       	std	Y+28, r19	; 0x1c
     e24:	2b 8f       	std	Y+27, r18	; 0x1b
     e26:	00 e0       	ldi	r16, 0x00	; 0
     e28:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		
		scale =  ( y_graph_size / range) * (arr[i] - bottomvalue);	//skala datapunkt
		
		LCD_write_adr(i*2, bottom - scale);	//sätt position för datapunkt
     e2a:	c1 01       	movw	r24, r2
     e2c:	aa 27       	eor	r26, r26
     e2e:	97 fd       	sbrc	r25, 7
     e30:	a0 95       	com	r26
     e32:	ba 2f       	mov	r27, r26
     e34:	8d 8f       	std	Y+29, r24	; 0x1d
     e36:	9e 8f       	std	Y+30, r25	; 0x1e
     e38:	af 8f       	std	Y+31, r26	; 0x1f
     e3a:	b8 a3       	lds	r27, 0x58
     e3c:	76 c0       	rjmp	.+236    	; 0xf2a <LCD_draw_graph+0x32a>
	float scale;
		
	//rita graf
	for (int i = 0; i < x_width; i++)
	{
		for (int j = 1; j < y_graph_size; j++)
     e3e:	ee 24       	eor	r14, r14
     e40:	ff 24       	eor	r15, r15
     e42:	e3 94       	inc	r14
bool even_tens(int num)		//kolla efter jämna tiotal
{
	return even_nums(num,10); 
}

void LCD_draw_graph(char color, int y_offset, float y_graph_size, float * arr, int x_width)		//rita en graf på skärmen 
     e44:	b1 01       	movw	r22, r2
     e46:	6e 19       	sub	r22, r14
     e48:	7f 09       	sbc	r23, r15
	//rita graf
	for (int i = 0; i < x_width; i++)
	{
		for (int j = 1; j < y_graph_size; j++)
		{
			LCD_write_adr(i*2, bottom - j);	//sätt position för datapunkt
     e4a:	c8 01       	movw	r24, r16
     e4c:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_write_adr>
			LCD_write_data(white);				//skriv bakgrund
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_write_data>
			LCD_write_data(white);		
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_write_data>
	float scale;
		
	//rita graf
	for (int i = 0; i < x_width; i++)
	{
		for (int j = 1; j < y_graph_size; j++)
     e5c:	08 94       	sec
     e5e:	e1 1c       	adc	r14, r1
     e60:	f1 1c       	adc	r15, r1
     e62:	b7 01       	movw	r22, r14
     e64:	88 27       	eor	r24, r24
     e66:	77 fd       	sbrc	r23, 7
     e68:	80 95       	com	r24
     e6a:	98 2f       	mov	r25, r24
     e6c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     e70:	a5 01       	movw	r20, r10
     e72:	94 01       	movw	r18, r8
     e74:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__cmpsf2>
     e78:	88 23       	and	r24, r24
     e7a:	24 f3       	brlt	.-56     	; 0xe44 <LCD_draw_graph+0x244>
			LCD_write_data(white);				//skriv bakgrund
			LCD_write_data(white);		
		}
		
		
		scale =  ( y_graph_size / range) * (arr[i] - bottomvalue);	//skala datapunkt
     e7c:	af 81       	ldd	r26, Y+7	; 0x07
     e7e:	b8 85       	ldd	r27, Y+8	; 0x08
     e80:	4d 90       	ld	r4, X+
     e82:	5d 90       	ld	r5, X+
     e84:	6d 90       	ld	r6, X+
     e86:	7d 90       	ld	r7, X+
     e88:	b8 87       	std	Y+8, r27	; 0x08
     e8a:	af 83       	std	Y+7, r26	; 0x07
		
		LCD_write_adr(i*2, bottom - scale);	//sätt position för datapunkt
     e8c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     e8e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     e90:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e92:	98 a1       	lds	r25, 0x48
     e94:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     e98:	69 83       	std	Y+1, r22	; 0x01
     e9a:	7a 83       	std	Y+2, r23	; 0x02
     e9c:	8b 83       	std	Y+3, r24	; 0x03
     e9e:	9c 83       	std	Y+4, r25	; 0x04
			LCD_write_data(white);				//skriv bakgrund
			LCD_write_data(white);		
		}
		
		
		scale =  ( y_graph_size / range) * (arr[i] - bottomvalue);	//skala datapunkt
     ea0:	c5 01       	movw	r24, r10
     ea2:	b4 01       	movw	r22, r8
     ea4:	2f 85       	ldd	r18, Y+15	; 0x0f
     ea6:	38 89       	ldd	r19, Y+16	; 0x10
     ea8:	49 89       	ldd	r20, Y+17	; 0x11
     eaa:	5b 89       	ldd	r21, Y+19	; 0x13
     eac:	c2 2e       	mov	r12, r18
     eae:	d3 2e       	mov	r13, r19
     eb0:	e4 2e       	mov	r14, r20
     eb2:	f5 2e       	mov	r15, r21
     eb4:	a7 01       	movw	r20, r14
     eb6:	96 01       	movw	r18, r12
     eb8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divsf3>
     ebc:	69 87       	std	Y+9, r22	; 0x09
     ebe:	7a 87       	std	Y+10, r23	; 0x0a
     ec0:	8b 87       	std	Y+11, r24	; 0x0b
     ec2:	9c 87       	std	Y+12, r25	; 0x0c
     ec4:	c3 01       	movw	r24, r6
     ec6:	b2 01       	movw	r22, r4
     ec8:	2d 85       	ldd	r18, Y+13	; 0x0d
     eca:	3e 85       	ldd	r19, Y+14	; 0x0e
     ecc:	4f 89       	ldd	r20, Y+23	; 0x17
     ece:	58 8d       	ldd	r21, Y+24	; 0x18
     ed0:	c2 2e       	mov	r12, r18
     ed2:	d3 2e       	mov	r13, r19
     ed4:	e4 2e       	mov	r14, r20
     ed6:	f5 2e       	mov	r15, r21
     ed8:	a7 01       	movw	r20, r14
     eda:	96 01       	movw	r18, r12
     edc:	0e 94 47 0a 	call	0x148e	; 0x148e <__subsf3>
     ee0:	9b 01       	movw	r18, r22
     ee2:	ac 01       	movw	r20, r24
     ee4:	69 85       	ldd	r22, Y+9	; 0x09
     ee6:	7a 85       	ldd	r23, Y+10	; 0x0a
     ee8:	8b 85       	ldd	r24, Y+11	; 0x0b
     eea:	9c 85       	ldd	r25, Y+12	; 0x0c
     eec:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__mulsf3>
     ef0:	9b 01       	movw	r18, r22
     ef2:	ac 01       	movw	r20, r24
		
		LCD_write_adr(i*2, bottom - scale);	//sätt position för datapunkt
     ef4:	69 81       	ldd	r22, Y+1	; 0x01
     ef6:	7a 81       	ldd	r23, Y+2	; 0x02
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	9c 81       	ldd	r25, Y+4	; 0x04
     efc:	0e 94 47 0a 	call	0x148e	; 0x148e <__subsf3>
     f00:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fixunssfsi>
     f04:	ab 01       	movw	r20, r22
     f06:	bc 01       	movw	r22, r24
     f08:	c8 01       	movw	r24, r16
     f0a:	ba 01       	movw	r22, r20
     f0c:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_write_adr>
		
		LCD_write_data(color);	//skriv punkt
     f10:	8d 81       	ldd	r24, Y+5	; 0x05
     f12:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_write_data>
		LCD_write_data(color);	//skriv punkt
     f16:	8d 81       	ldd	r24, Y+5	; 0x05
     f18:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_write_data>
     f1c:	0e 5f       	subi	r16, 0xFE	; 254
     f1e:	1f 4f       	sbci	r17, 0xFF	; 255
	float range = topvalue - bottomvalue;
	int grid_scale = range / 3;	//skala grid mot range, rita tre linjer eller fyra
	float scale;
		
	//rita graf
	for (int i = 0; i < x_width; i++)
     f20:	eb 8d       	ldd	r30, Y+27	; 0x1b
     f22:	fc 8d       	ldd	r31, Y+28	; 0x1c
     f24:	0e 17       	cp	r16, r30
     f26:	1f 07       	cpc	r17, r31
     f28:	61 f0       	breq	.+24     	; 0xf42 <LCD_draw_graph+0x342>
	{
		for (int j = 1; j < y_graph_size; j++)
     f2a:	c5 01       	movw	r24, r10
     f2c:	b4 01       	movw	r22, r8
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__gesf2>
     f3a:	18 16       	cp	r1, r24
     f3c:	0c f4       	brge	.+2      	; 0xf40 <LCD_draw_graph+0x340>
     f3e:	7f cf       	rjmp	.-258    	; 0xe3e <LCD_draw_graph+0x23e>
     f40:	9d cf       	rjmp	.-198    	; 0xe7c <LCD_draw_graph+0x27c>
		LCD_write_data(color);	//skriv punkt
		LCD_write_data(color);	//skriv punkt
	}
	
	//skriv ut top och bottenvärde
	LCD_write_string(float_to_str(topvalue), color, graph_width , y_offset + 1);		//*2 som fulhack för att få bättre läsbarhet
     f42:	2a a1       	lds	r18, 0x4a
     f44:	3b a1       	lds	r19, 0x4b
     f46:	4c a1       	lds	r20, 0x4c
     f48:	5d a1       	lds	r21, 0x4d
     f4a:	82 2f       	mov	r24, r18
     f4c:	93 2f       	mov	r25, r19
     f4e:	a4 2f       	mov	r26, r20
     f50:	b5 2f       	mov	r27, r21
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	0e 94 1b 05 	call	0xa36	; 0xa36 <float_to_str>
     f5a:	2e a1       	lds	r18, 0x4e
     f5c:	3f a1       	lds	r19, 0x4f
     f5e:	2f 5f       	subi	r18, 0xFF	; 255
     f60:	3f 4f       	sbci	r19, 0xFF	; 255
     f62:	6d 81       	ldd	r22, Y+5	; 0x05
     f64:	49 a1       	lds	r20, 0x49
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_write_string>
	LCD_write_string(float_to_str(bottomvalue), color, graph_width , bottom - 8);
     f6c:	2d 85       	ldd	r18, Y+13	; 0x0d
     f6e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f70:	4f 89       	ldd	r20, Y+23	; 0x17
     f72:	58 8d       	ldd	r21, Y+24	; 0x18
     f74:	82 2f       	mov	r24, r18
     f76:	93 2f       	mov	r25, r19
     f78:	a4 2f       	mov	r26, r20
     f7a:	b5 2f       	mov	r27, r21
     f7c:	bc 01       	movw	r22, r24
     f7e:	cd 01       	movw	r24, r26
     f80:	0e 94 1b 05 	call	0xa36	; 0xa36 <float_to_str>
     f84:	91 01       	movw	r18, r2
     f86:	28 50       	subi	r18, 0x08	; 8
     f88:	30 40       	sbci	r19, 0x00	; 0
     f8a:	6d 81       	ldd	r22, Y+5	; 0x05
     f8c:	49 a1       	lds	r20, 0x49
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_write_string>

	//loop för grid
	for (int i = bottomvalue; i < topvalue; i++)
     f94:	3d 85       	ldd	r19, Y+13	; 0x0d
     f96:	2e 85       	ldd	r18, Y+14	; 0x0e
     f98:	4f 89       	ldd	r20, Y+23	; 0x17
     f9a:	58 8d       	ldd	r21, Y+24	; 0x18
     f9c:	83 2f       	mov	r24, r19
     f9e:	92 2f       	mov	r25, r18
     fa0:	a4 2f       	mov	r26, r20
     fa2:	b5 2f       	mov	r27, r21
     fa4:	bc 01       	movw	r22, r24
     fa6:	cd 01       	movw	r24, r26
     fa8:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixsfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	3c 01       	movw	r6, r24
     fb2:	b3 01       	movw	r22, r6
     fb4:	88 27       	eor	r24, r24
     fb6:	77 fd       	sbrc	r23, 7
     fb8:	80 95       	com	r24
     fba:	98 2f       	mov	r25, r24
     fbc:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     fc0:	6b 01       	movw	r12, r22
     fc2:	7c 01       	movw	r14, r24
     fc4:	4a a1       	lds	r20, 0x4a
     fc6:	5b a1       	lds	r21, 0x4b
     fc8:	ec a1       	lds	r30, 0x4c
     fca:	fd a1       	lds	r31, 0x4d
     fcc:	04 2f       	mov	r16, r20
     fce:	15 2f       	mov	r17, r21
     fd0:	2e 2f       	mov	r18, r30
     fd2:	3f 2f       	mov	r19, r31
     fd4:	a9 01       	movw	r20, r18
     fd6:	98 01       	movw	r18, r16
     fd8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__cmpsf2>
     fdc:	88 23       	and	r24, r24
     fde:	0c f0       	brlt	.+2      	; 0xfe2 <LCD_draw_graph+0x3e2>
     fe0:	d3 c0       	rjmp	.+422    	; 0x1188 <LCD_draw_graph+0x588>
			{
				LCD_draw_x_line(black, bottom - temp, graph_width);		//rita nolla om den är med
			}
			
			
			i += grid_scale - 1;		//hoppa jämna tiotal
     fe2:	49 8c       	ldd	r4, Y+25	; 0x19
     fe4:	5a 8c       	ldd	r5, Y+26	; 0x1a
     fe6:	08 94       	sec
     fe8:	41 08       	sbc	r4, r1
     fea:	51 08       	sbc	r5, r1
     fec:	38 86       	std	Y+8, r3	; 0x08
     fee:	2f 82       	std	Y+7, r2	; 0x07
     ff0:	7a 82       	std	Y+2, r7	; 0x02
     ff2:	69 82       	std	Y+1, r6	; 0x01
     ff4:	60 2e       	mov	r6, r16
     ff6:	71 2e       	mov	r7, r17
     ff8:	2c a0       	lds	r18, 0x8c
     ffa:	3f 88       	ldd	r3, Y+23	; 0x17
     ffc:	5e 82       	std	Y+6, r5	; 0x06
     ffe:	4d 82       	std	Y+5, r4	; 0x05
    1000:	4d a0       	lds	r20, 0x8d
    1002:	58 8c       	ldd	r5, Y+24	; 0x18

	//loop för grid
	for (int i = bottomvalue; i < topvalue; i++)
	{
		
		if (even_nums(i, grid_scale))	//kolla om vi ska rita en linje, leta jämna tal utifrån grid skalning
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	69 8d       	ldd	r22, Y+25	; 0x19
    100a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    100c:	0e 94 42 03 	call	0x684	; 0x684 <even_nums>
    1010:	88 23       	and	r24, r24
    1012:	09 f4       	brne	.+2      	; 0x1016 <LCD_draw_graph+0x416>
    1014:	46 c0       	rjmp	.+140    	; 0x10a2 <LCD_draw_graph+0x4a2>
		{
			int temp = (i - bottomvalue) * ( (y_graph_size) / range);
    1016:	c7 01       	movw	r24, r14
    1018:	b6 01       	movw	r22, r12
    101a:	fd 85       	ldd	r31, Y+13	; 0x0d
    101c:	ee 85       	ldd	r30, Y+14	; 0x0e
    101e:	0f 2f       	mov	r16, r31
    1020:	1e 2f       	mov	r17, r30
    1022:	23 2d       	mov	r18, r3
    1024:	35 2d       	mov	r19, r5
    1026:	a9 01       	movw	r20, r18
    1028:	98 01       	movw	r18, r16
    102a:	0e 94 47 0a 	call	0x148e	; 0x148e <__subsf3>
    102e:	6b 01       	movw	r12, r22
    1030:	7c 01       	movw	r14, r24
    1032:	c5 01       	movw	r24, r10
    1034:	b4 01       	movw	r22, r8
    1036:	ff 85       	ldd	r31, Y+15	; 0x0f
    1038:	e8 89       	ldd	r30, Y+16	; 0x10
    103a:	59 89       	ldd	r21, Y+17	; 0x11
    103c:	4b 89       	ldd	r20, Y+19	; 0x13
    103e:	0f 2f       	mov	r16, r31
    1040:	1e 2f       	mov	r17, r30
    1042:	25 2f       	mov	r18, r21
    1044:	34 2f       	mov	r19, r20
    1046:	a9 01       	movw	r20, r18
    1048:	98 01       	movw	r18, r16
    104a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divsf3>
    104e:	9b 01       	movw	r18, r22
    1050:	ac 01       	movw	r20, r24
    1052:	c7 01       	movw	r24, r14
    1054:	b6 01       	movw	r22, r12
    1056:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__mulsf3>
    105a:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixsfsi>
			if (i != 0)
    105e:	29 81       	ldd	r18, Y+1	; 0x01
    1060:	3a 81       	ldd	r19, Y+2	; 0x02
    1062:	21 15       	cp	r18, r1
    1064:	31 05       	cpc	r19, r1
    1066:	59 f0       	breq	.+22     	; 0x107e <LCD_draw_graph+0x47e>
			{
				LCD_draw_x_dotted_line(black, bottom - temp, graph_width);
    1068:	8f 81       	ldd	r24, Y+7	; 0x07
    106a:	98 85       	ldd	r25, Y+8	; 0x08
    106c:	86 1b       	sub	r24, r22
    106e:	97 0b       	sbc	r25, r23
    1070:	bc 01       	movw	r22, r24
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	49 a1       	lds	r20, 0x49
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_draw_x_dotted_line>
    107c:	0a c0       	rjmp	.+20     	; 0x1092 <LCD_draw_graph+0x492>
			} 
			else
			{
				LCD_draw_x_line(black, bottom - temp, graph_width);		//rita nolla om den är med
    107e:	af 81       	ldd	r26, Y+7	; 0x07
    1080:	b8 85       	ldd	r27, Y+8	; 0x08
    1082:	a6 1b       	sub	r26, r22
    1084:	b7 0b       	sbc	r27, r23
    1086:	bd 01       	movw	r22, r26
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	49 a1       	lds	r20, 0x49
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_draw_x_line>
			}
			
			
			i += grid_scale - 1;		//hoppa jämna tiotal
    1092:	e9 81       	ldd	r30, Y+1	; 0x01
    1094:	fa 81       	ldd	r31, Y+2	; 0x02
    1096:	2d 81       	ldd	r18, Y+5	; 0x05
    1098:	3e 81       	ldd	r19, Y+6	; 0x06
    109a:	e2 0f       	add	r30, r18
    109c:	f3 1f       	adc	r31, r19
    109e:	fa 83       	std	Y+2, r31	; 0x02
    10a0:	e9 83       	std	Y+1, r30	; 0x01
	//skriv ut top och bottenvärde
	LCD_write_string(float_to_str(topvalue), color, graph_width , y_offset + 1);		//*2 som fulhack för att få bättre läsbarhet
	LCD_write_string(float_to_str(bottomvalue), color, graph_width , bottom - 8);

	//loop för grid
	for (int i = bottomvalue; i < topvalue; i++)
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	dc 01       	movw	r26, r24
    10ae:	bd 01       	movw	r22, r26
    10b0:	88 27       	eor	r24, r24
    10b2:	77 fd       	sbrc	r23, 7
    10b4:	80 95       	com	r24
    10b6:	98 2f       	mov	r25, r24
    10b8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
    10bc:	6b 01       	movw	r12, r22
    10be:	7c 01       	movw	r14, r24
    10c0:	06 2d       	mov	r16, r6
    10c2:	17 2d       	mov	r17, r7
    10c4:	22 2d       	mov	r18, r2
    10c6:	34 2d       	mov	r19, r4
    10c8:	a9 01       	movw	r20, r18
    10ca:	98 01       	movw	r18, r16
    10cc:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__cmpsf2>
    10d0:	88 23       	and	r24, r24
    10d2:	0c f4       	brge	.+2      	; 0x10d6 <LCD_draw_graph+0x4d6>
    10d4:	97 cf       	rjmp	.-210    	; 0x1004 <LCD_draw_graph+0x404>
    10d6:	58 c0       	rjmp	.+176    	; 0x1188 <LCD_draw_graph+0x588>
		if (temp < bottomvalue)
		{
			bottomvalue = temp;
		}
	}
	topvalue += top_bottom_offset;		//lägg till en offset för snyggare graf
    10d8:	59 85       	ldd	r21, Y+9	; 0x09
    10da:	4d 85       	ldd	r20, Y+13	; 0x0d
    10dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    10de:	2f 85       	ldd	r18, Y+15	; 0x0f
    10e0:	85 2f       	mov	r24, r21
    10e2:	94 2f       	mov	r25, r20
    10e4:	a3 2f       	mov	r26, r19
    10e6:	b2 2f       	mov	r27, r18
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	50 e4       	ldi	r21, 0x40	; 64
    10f4:	0e 94 48 0a 	call	0x1490	; 0x1490 <__addsf3>
    10f8:	e6 2e       	mov	r14, r22
    10fa:	17 2f       	mov	r17, r23
    10fc:	08 2f       	mov	r16, r24
    10fe:	f9 2e       	mov	r15, r25
    1100:	6a a3       	lds	r22, 0x5a
    1102:	7b a3       	lds	r23, 0x5b
    1104:	8c a3       	lds	r24, 0x5c
    1106:	9d a3       	lds	r25, 0x5d
	bottomvalue -= top_bottom_offset;
    1108:	29 85       	ldd	r18, Y+9	; 0x09
    110a:	3d 85       	ldd	r19, Y+13	; 0x0d
    110c:	4e 85       	ldd	r20, Y+14	; 0x0e
    110e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1110:	82 2f       	mov	r24, r18
    1112:	93 2f       	mov	r25, r19
    1114:	a4 2f       	mov	r26, r20
    1116:	b5 2f       	mov	r27, r21
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	50 e4       	ldi	r21, 0x40	; 64
    1124:	0e 94 47 0a 	call	0x148e	; 0x148e <__subsf3>
    1128:	26 2f       	mov	r18, r22
    112a:	37 2f       	mov	r19, r23
    112c:	48 2f       	mov	r20, r24
    112e:	59 2f       	mov	r21, r25
    1130:	6d 87       	std	Y+13, r22	; 0x0d
    1132:	7e 87       	std	Y+14, r23	; 0x0e
    1134:	8f 8b       	std	Y+23, r24	; 0x17
    1136:	98 8f       	std	Y+24, r25	; 0x18
	
	// välj range att använda	
	float range = topvalue - bottomvalue;
    1138:	8e 2d       	mov	r24, r14
    113a:	91 2f       	mov	r25, r17
    113c:	a0 2f       	mov	r26, r16
    113e:	bf 2d       	mov	r27, r15
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	02 2f       	mov	r16, r18
    1146:	13 2f       	mov	r17, r19
    1148:	24 2f       	mov	r18, r20
    114a:	35 2f       	mov	r19, r21
    114c:	a9 01       	movw	r20, r18
    114e:	98 01       	movw	r18, r16
    1150:	0e 94 47 0a 	call	0x148e	; 0x148e <__subsf3>
    1154:	6f 87       	std	Y+15, r22	; 0x0f
    1156:	78 8b       	std	Y+16, r23	; 0x10
    1158:	89 8b       	std	Y+17, r24	; 0x11
    115a:	9b 8b       	std	Y+19, r25	; 0x13
	int grid_scale = range / 3;	//skala grid mot range, rita tre linjer eller fyra
    115c:	37 2f       	mov	r19, r23
    115e:	48 2f       	mov	r20, r24
    1160:	59 2f       	mov	r21, r25
    1162:	86 2f       	mov	r24, r22
    1164:	93 2f       	mov	r25, r19
    1166:	a4 2f       	mov	r26, r20
    1168:	b5 2f       	mov	r27, r21
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e4       	ldi	r20, 0x40	; 64
    1174:	50 e4       	ldi	r21, 0x40	; 64
    1176:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divsf3>
    117a:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixsfsi>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	9a 8f       	std	Y+26, r25	; 0x1a
    1184:	89 8f       	std	Y+25, r24	; 0x19
    1186:	dd ce       	rjmp	.-582    	; 0xf42 <LCD_draw_graph+0x342>
			i += grid_scale - 1;		//hoppa jämna tiotal
		}

	}

}
    1188:	a7 96       	adiw	r28, 0x27	; 39
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	bf 90       	pop	r11
    11a6:	af 90       	pop	r10
    11a8:	9f 90       	pop	r9
    11aa:	8f 90       	pop	r8
    11ac:	7f 90       	pop	r7
    11ae:	6f 90       	pop	r6
    11b0:	5f 90       	pop	r5
    11b2:	4f 90       	pop	r4
    11b4:	3f 90       	pop	r3
    11b6:	2f 90       	pop	r2
    11b8:	08 95       	ret

000011ba <main>:
	return false;
}

int main(void)
{
	setup();		//anropa setuprutin
    11ba:	0e 94 f5 04 	call	0x9ea	; 0x9ea <setup>
	
    while(1)
    {

		LCD_write_string(buffer,black,0,100);
    11be:	cc ec       	ldi	r28, 0xCC	; 204
    11c0:	d3 e0       	ldi	r29, 0x03	; 3
		//send_char(~(128+32+8+2));
		
		
		if ( button_press(high_button) )		//styr hög larmnivå
		{
			LCD_write_big_string("Hög larmnivå:              " , red, 0, 0, 2);
    11c2:	0f 2e       	mov	r0, r31
    11c4:	f0 e7       	ldi	r31, 0x70	; 112
    11c6:	8f 2e       	mov	r8, r31
    11c8:	f1 e0       	ldi	r31, 0x01	; 1
    11ca:	9f 2e       	mov	r9, r31
    11cc:	f0 2d       	mov	r31, r0
		{
			send_data_CSV();
		} 
		else
		{
			if (temp > high_alarm_level)		//kontrollera temperaturgränser för larm
    11ce:	0f 2e       	mov	r0, r31
    11d0:	fc e1       	ldi	r31, 0x1C	; 28
    11d2:	af 2e       	mov	r10, r31
    11d4:	f4 e0       	ldi	r31, 0x04	; 4
    11d6:	bf 2e       	mov	r11, r31
    11d8:	f0 2d       	mov	r31, r0
				LCD_write_big_string("Larm?", blue, 0, 30, 7);
				sound_toggle();
			}
			else
			{
				LCD_write_big_string("Nuvarande temperatur är:" , red, 0, 0, 2);		//uppdatera skärm
    11da:	0f 2e       	mov	r0, r31
    11dc:	ff ea       	ldi	r31, 0xAF	; 175
    11de:	2f 2e       	mov	r2, r31
    11e0:	f1 e0       	ldi	r31, 0x01	; 1
    11e2:	3f 2e       	mov	r3, r31
    11e4:	f0 2d       	mov	r31, r0
				LCD_write_big_string("Larm?", red, 0, 30, 7);
				sound_toggle();
			}
			else if (temp < low_alarm_level)
			{
				LCD_write_big_string("Larm?", blue, 0, 30, 7);
    11e6:	0f 2e       	mov	r0, r31
    11e8:	f9 ea       	ldi	r31, 0xA9	; 169
    11ea:	6f 2e       	mov	r6, r31
    11ec:	f1 e0       	ldi	r31, 0x01	; 1
    11ee:	7f 2e       	mov	r7, r31
    11f0:	f0 2d       	mov	r31, r0
				eeprom_write_word(alarm_eeprom_adr,high_alarm_level);
			}
		}
		else if ( button_press(low_button) )		//styr inmatning av låg larmnivå
		{
			LCD_write_big_string("Låg larmnivå:               " , red, 0, 0, 2);
    11f2:	0f 2e       	mov	r0, r31
    11f4:	fc e8       	ldi	r31, 0x8C	; 140
    11f6:	4f 2e       	mov	r4, r31
    11f8:	f1 e0       	ldi	r31, 0x01	; 1
    11fa:	5f 2e       	mov	r5, r31
    11fc:	f0 2d       	mov	r31, r0
	setup();		//anropa setuprutin
	
    while(1)
    {

		LCD_write_string(buffer,black,0,100);
    11fe:	ce 01       	movw	r24, r28
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	24 e6       	ldi	r18, 0x64	; 100
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_write_string>
		//char buffer[7];
		
		//send_char(~(128+32+8+2));
		
		
		if ( button_press(high_button) )		//styr hög larmnivå
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	0e 94 bd 04 	call	0x97a	; 0x97a <button_press>
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <main+0x60>
    1218:	48 c0       	rjmp	.+144    	; 0x12aa <main+0xf0>
		{
			LCD_write_big_string("Hög larmnivå:              " , red, 0, 0, 2);
    121a:	c4 01       	movw	r24, r8
    121c:	60 ee       	ldi	r22, 0xE0	; 224
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	02 e0       	ldi	r16, 0x02	; 2
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_write_big_string>
			
			LCD_write_big_string(float_to_str(high_alarm_level), red, 0, 30, 7);
    122e:	60 91 ca 05 	lds	r22, 0x05CA
    1232:	70 91 cb 05 	lds	r23, 0x05CB
    1236:	88 27       	eor	r24, r24
    1238:	77 fd       	sbrc	r23, 7
    123a:	80 95       	com	r24
    123c:	98 2f       	mov	r25, r24
    123e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
    1242:	0e 94 1b 05 	call	0xa36	; 0xa36 <float_to_str>
    1246:	60 ee       	ldi	r22, 0xE0	; 224
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	2e e1       	ldi	r18, 0x1E	; 30
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	07 e0       	ldi	r16, 0x07	; 7
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_write_big_string>
			
			if (button_press(inc_button))
    1258:	84 e0       	ldi	r24, 0x04	; 4
    125a:	0e 94 bd 04 	call	0x97a	; 0x97a <button_press>
    125e:	88 23       	and	r24, r24
    1260:	79 f0       	breq	.+30     	; 0x1280 <main+0xc6>
			{
				high_alarm_level++;
    1262:	60 91 ca 05 	lds	r22, 0x05CA
    1266:	70 91 cb 05 	lds	r23, 0x05CB
    126a:	6f 5f       	subi	r22, 0xFF	; 255
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	70 93 cb 05 	sts	0x05CB, r23
    1272:	60 93 ca 05 	sts	0x05CA, r22
				eeprom_write_word(alarm_eeprom_adr,high_alarm_level);
    1276:	85 e0       	ldi	r24, 0x05	; 5
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 9d 0c 	call	0x193a	; 0x193a <__eewr_word_m328p>
    127e:	bf cf       	rjmp	.-130    	; 0x11fe <main+0x44>
			}
			else if (button_press(dec_button))
    1280:	88 e0       	ldi	r24, 0x08	; 8
    1282:	0e 94 bd 04 	call	0x97a	; 0x97a <button_press>
    1286:	88 23       	and	r24, r24
    1288:	09 f4       	brne	.+2      	; 0x128c <main+0xd2>
    128a:	b9 cf       	rjmp	.-142    	; 0x11fe <main+0x44>
			{
				high_alarm_level--;
    128c:	60 91 ca 05 	lds	r22, 0x05CA
    1290:	70 91 cb 05 	lds	r23, 0x05CB
    1294:	61 50       	subi	r22, 0x01	; 1
    1296:	70 40       	sbci	r23, 0x00	; 0
    1298:	70 93 cb 05 	sts	0x05CB, r23
    129c:	60 93 ca 05 	sts	0x05CA, r22
				eeprom_write_word(alarm_eeprom_adr,high_alarm_level);
    12a0:	85 e0       	ldi	r24, 0x05	; 5
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 9d 0c 	call	0x193a	; 0x193a <__eewr_word_m328p>
    12a8:	aa cf       	rjmp	.-172    	; 0x11fe <main+0x44>
			}
		}
		else if ( button_press(low_button) )		//styr inmatning av låg larmnivå
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	0e 94 bd 04 	call	0x97a	; 0x97a <button_press>
    12b0:	88 23       	and	r24, r24
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <main+0xfc>
    12b4:	48 c0       	rjmp	.+144    	; 0x1346 <main+0x18c>
		{
			LCD_write_big_string("Låg larmnivå:               " , red, 0, 0, 2);
    12b6:	c2 01       	movw	r24, r4
    12b8:	60 ee       	ldi	r22, 0xE0	; 224
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	02 e0       	ldi	r16, 0x02	; 2
    12c4:	10 e0       	ldi	r17, 0x00	; 0
    12c6:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_write_big_string>
		
			LCD_write_big_string(float_to_str(low_alarm_level), blue, 0, 30, 7);
    12ca:	60 91 c4 03 	lds	r22, 0x03C4
    12ce:	70 91 c5 03 	lds	r23, 0x03C5
    12d2:	88 27       	eor	r24, r24
    12d4:	77 fd       	sbrc	r23, 7
    12d6:	80 95       	com	r24
    12d8:	98 2f       	mov	r25, r24
    12da:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
    12de:	0e 94 1b 05 	call	0xa36	; 0xa36 <float_to_str>
    12e2:	63 e0       	ldi	r22, 0x03	; 3
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	2e e1       	ldi	r18, 0x1E	; 30
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	07 e0       	ldi	r16, 0x07	; 7
    12ee:	10 e0       	ldi	r17, 0x00	; 0
    12f0:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_write_big_string>
			if (button_press(inc_button))
    12f4:	84 e0       	ldi	r24, 0x04	; 4
    12f6:	0e 94 bd 04 	call	0x97a	; 0x97a <button_press>
    12fa:	88 23       	and	r24, r24
    12fc:	79 f0       	breq	.+30     	; 0x131c <main+0x162>
			{
				low_alarm_level++;
    12fe:	60 91 c4 03 	lds	r22, 0x03C4
    1302:	70 91 c5 03 	lds	r23, 0x03C5
    1306:	6f 5f       	subi	r22, 0xFF	; 255
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	70 93 c5 03 	sts	0x03C5, r23
    130e:	60 93 c4 03 	sts	0x03C4, r22
				eeprom_write_word(alarm_eeprom_adr+2,low_alarm_level);
    1312:	87 e0       	ldi	r24, 0x07	; 7
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 9d 0c 	call	0x193a	; 0x193a <__eewr_word_m328p>
    131a:	71 cf       	rjmp	.-286    	; 0x11fe <main+0x44>
			}
			else if (button_press(dec_button))
    131c:	88 e0       	ldi	r24, 0x08	; 8
    131e:	0e 94 bd 04 	call	0x97a	; 0x97a <button_press>
    1322:	88 23       	and	r24, r24
    1324:	09 f4       	brne	.+2      	; 0x1328 <main+0x16e>
    1326:	6b cf       	rjmp	.-298    	; 0x11fe <main+0x44>
			{
				low_alarm_level--;
    1328:	60 91 c4 03 	lds	r22, 0x03C4
    132c:	70 91 c5 03 	lds	r23, 0x03C5
    1330:	61 50       	subi	r22, 0x01	; 1
    1332:	70 40       	sbci	r23, 0x00	; 0
    1334:	70 93 c5 03 	sts	0x03C5, r23
    1338:	60 93 c4 03 	sts	0x03C4, r22
				eeprom_write_word(alarm_eeprom_adr+2,low_alarm_level);
    133c:	87 e0       	ldi	r24, 0x07	; 7
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 9d 0c 	call	0x193a	; 0x193a <__eewr_word_m328p>
    1344:	5c cf       	rjmp	.-328    	; 0x11fe <main+0x44>
			}
		}		
		else if ( button_press(send_data_button) )		//Skicka data om knappen är tryckt!
    1346:	80 e2       	ldi	r24, 0x20	; 32
    1348:	0e 94 bd 04 	call	0x97a	; 0x97a <button_press>
    134c:	88 23       	and	r24, r24
    134e:	19 f0       	breq	.+6      	; 0x1356 <main+0x19c>
		{
			send_data_CSV();
    1350:	0e 94 99 05 	call	0xb32	; 0xb32 <send_data_CSV>
    1354:	54 cf       	rjmp	.-344    	; 0x11fe <main+0x44>
		} 
		else
		{
			if (temp > high_alarm_level)		//kontrollera temperaturgränser för larm
    1356:	f5 01       	movw	r30, r10
    1358:	c0 80       	ld	r12, Z
    135a:	d1 80       	ldd	r13, Z+1	; 0x01
    135c:	e2 80       	ldd	r14, Z+2	; 0x02
    135e:	f3 80       	ldd	r15, Z+3	; 0x03
    1360:	60 91 ca 05 	lds	r22, 0x05CA
    1364:	70 91 cb 05 	lds	r23, 0x05CB
    1368:	88 27       	eor	r24, r24
    136a:	77 fd       	sbrc	r23, 7
    136c:	80 95       	com	r24
    136e:	98 2f       	mov	r25, r24
    1370:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
    1374:	9b 01       	movw	r18, r22
    1376:	ac 01       	movw	r20, r24
    1378:	c7 01       	movw	r24, r14
    137a:	b6 01       	movw	r22, r12
    137c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__gesf2>
    1380:	18 16       	cp	r1, r24
    1382:	6c f4       	brge	.+26     	; 0x139e <main+0x1e4>
			{
				LCD_write_big_string("Larm?", red, 0, 30, 7);
    1384:	c3 01       	movw	r24, r6
    1386:	60 ee       	ldi	r22, 0xE0	; 224
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	2e e1       	ldi	r18, 0x1E	; 30
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	07 e0       	ldi	r16, 0x07	; 7
    1392:	10 e0       	ldi	r17, 0x00	; 0
    1394:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_write_big_string>
				sound_toggle();
    1398:	0e 94 e7 04 	call	0x9ce	; 0x9ce <sound_toggle>
    139c:	61 c0       	rjmp	.+194    	; 0x1460 <main+0x2a6>
			}
			else if (temp < low_alarm_level)
    139e:	60 91 c4 03 	lds	r22, 0x03C4
    13a2:	70 91 c5 03 	lds	r23, 0x03C5
    13a6:	88 27       	eor	r24, r24
    13a8:	77 fd       	sbrc	r23, 7
    13aa:	80 95       	com	r24
    13ac:	98 2f       	mov	r25, r24
    13ae:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	c7 01       	movw	r24, r14
    13b8:	b6 01       	movw	r22, r12
    13ba:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__cmpsf2>
    13be:	88 23       	and	r24, r24
    13c0:	6c f4       	brge	.+26     	; 0x13dc <main+0x222>
			{
				LCD_write_big_string("Larm?", blue, 0, 30, 7);
    13c2:	c3 01       	movw	r24, r6
    13c4:	63 e0       	ldi	r22, 0x03	; 3
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	2e e1       	ldi	r18, 0x1E	; 30
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	07 e0       	ldi	r16, 0x07	; 7
    13d0:	10 e0       	ldi	r17, 0x00	; 0
    13d2:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_write_big_string>
				sound_toggle();
    13d6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <sound_toggle>
    13da:	42 c0       	rjmp	.+132    	; 0x1460 <main+0x2a6>
			}
			else
			{
				LCD_write_big_string("Nuvarande temperatur är:" , red, 0, 0, 2);		//uppdatera skärm
    13dc:	c1 01       	movw	r24, r2
    13de:	60 ee       	ldi	r22, 0xE0	; 224
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	02 e0       	ldi	r16, 0x02	; 2
    13ea:	10 e0       	ldi	r17, 0x00	; 0
    13ec:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_write_big_string>
				LCD_write_big_string(float_to_str(temp), black, 0, 30, 7);
    13f0:	f5 01       	movw	r30, r10
    13f2:	60 81       	ld	r22, Z
    13f4:	71 81       	ldd	r23, Z+1	; 0x01
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	0e 94 1b 05 	call	0xa36	; 0xa36 <float_to_str>
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	2e e1       	ldi	r18, 0x1E	; 30
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	07 e0       	ldi	r16, 0x07	; 7
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_write_big_string>
				sound_off();
    1410:	0e 94 e5 04 	call	0x9ca	; 0x9ca <sound_off>
				LCD_write_string(float_to_str(high_alarm_level) , red, 280, 20);
    1414:	60 91 ca 05 	lds	r22, 0x05CA
    1418:	70 91 cb 05 	lds	r23, 0x05CB
    141c:	88 27       	eor	r24, r24
    141e:	77 fd       	sbrc	r23, 7
    1420:	80 95       	com	r24
    1422:	98 2f       	mov	r25, r24
    1424:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
    1428:	0e 94 1b 05 	call	0xa36	; 0xa36 <float_to_str>
    142c:	60 ee       	ldi	r22, 0xE0	; 224
    142e:	48 e1       	ldi	r20, 0x18	; 24
    1430:	51 e0       	ldi	r21, 0x01	; 1
    1432:	24 e1       	ldi	r18, 0x14	; 20
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_write_string>
				LCD_write_string(float_to_str(low_alarm_level) , blue, 280, 30);			
    143a:	60 91 c4 03 	lds	r22, 0x03C4
    143e:	70 91 c5 03 	lds	r23, 0x03C5
    1442:	88 27       	eor	r24, r24
    1444:	77 fd       	sbrc	r23, 7
    1446:	80 95       	com	r24
    1448:	98 2f       	mov	r25, r24
    144a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
    144e:	0e 94 1b 05 	call	0xa36	; 0xa36 <float_to_str>
    1452:	63 e0       	ldi	r22, 0x03	; 3
    1454:	48 e1       	ldi	r20, 0x18	; 24
    1456:	51 e0       	ldi	r21, 0x01	; 1
    1458:	2e e1       	ldi	r18, 0x1E	; 30
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_write_string>
			}


			
			if (update_graph_flag)
    1460:	80 91 c6 03 	lds	r24, 0x03C6
    1464:	88 23       	and	r24, r24
    1466:	09 f4       	brne	.+2      	; 0x146a <main+0x2b0>
    1468:	ca ce       	rjmp	.-620    	; 0x11fe <main+0x44>
			{
				LCD_draw_graph(red, 135, 104, arr, arr_length);
    146a:	80 ee       	ldi	r24, 0xE0	; 224
    146c:	67 e8       	ldi	r22, 0x87	; 135
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 ed       	ldi	r20, 0xD0	; 208
    1476:	52 e4       	ldi	r21, 0x42	; 66
    1478:	85 01       	movw	r16, r10
    147a:	0f 2e       	mov	r0, r31
    147c:	f9 e6       	ldi	r31, 0x69	; 105
    147e:	ef 2e       	mov	r14, r31
    1480:	ff 24       	eor	r15, r15
    1482:	f0 2d       	mov	r31, r0
    1484:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_draw_graph>
				usart_prstr("AT+BTRSSI,1\r");		//saker för att läsa signalstyrka
				_delay_ms(2000);
				usart_prstr("AT+BTRSSI,0\r");
				usart_prstr("ATO\r");*/
				
				update_graph_flag = false;
    1488:	10 92 c6 03 	sts	0x03C6, r1
    148c:	b8 ce       	rjmp	.-656    	; 0x11fe <main+0x44>

0000148e <__subsf3>:
    148e:	50 58       	subi	r21, 0x80	; 128

00001490 <__addsf3>:
    1490:	bb 27       	eor	r27, r27
    1492:	aa 27       	eor	r26, r26
    1494:	0e d0       	rcall	.+28     	; 0x14b2 <__addsf3x>
    1496:	75 c1       	rjmp	.+746    	; 0x1782 <__fp_round>
    1498:	66 d1       	rcall	.+716    	; 0x1766 <__fp_pscA>
    149a:	30 f0       	brcs	.+12     	; 0x14a8 <__addsf3+0x18>
    149c:	6b d1       	rcall	.+726    	; 0x1774 <__fp_pscB>
    149e:	20 f0       	brcs	.+8      	; 0x14a8 <__addsf3+0x18>
    14a0:	31 f4       	brne	.+12     	; 0x14ae <__addsf3+0x1e>
    14a2:	9f 3f       	cpi	r25, 0xFF	; 255
    14a4:	11 f4       	brne	.+4      	; 0x14aa <__addsf3+0x1a>
    14a6:	1e f4       	brtc	.+6      	; 0x14ae <__addsf3+0x1e>
    14a8:	5b c1       	rjmp	.+694    	; 0x1760 <__fp_nan>
    14aa:	0e f4       	brtc	.+2      	; 0x14ae <__addsf3+0x1e>
    14ac:	e0 95       	com	r30
    14ae:	e7 fb       	bst	r30, 7
    14b0:	51 c1       	rjmp	.+674    	; 0x1754 <__fp_inf>

000014b2 <__addsf3x>:
    14b2:	e9 2f       	mov	r30, r25
    14b4:	77 d1       	rcall	.+750    	; 0x17a4 <__fp_split3>
    14b6:	80 f3       	brcs	.-32     	; 0x1498 <__addsf3+0x8>
    14b8:	ba 17       	cp	r27, r26
    14ba:	62 07       	cpc	r22, r18
    14bc:	73 07       	cpc	r23, r19
    14be:	84 07       	cpc	r24, r20
    14c0:	95 07       	cpc	r25, r21
    14c2:	18 f0       	brcs	.+6      	; 0x14ca <__addsf3x+0x18>
    14c4:	71 f4       	brne	.+28     	; 0x14e2 <__addsf3x+0x30>
    14c6:	9e f5       	brtc	.+102    	; 0x152e <__addsf3x+0x7c>
    14c8:	8f c1       	rjmp	.+798    	; 0x17e8 <__fp_zero>
    14ca:	0e f4       	brtc	.+2      	; 0x14ce <__addsf3x+0x1c>
    14cc:	e0 95       	com	r30
    14ce:	0b 2e       	mov	r0, r27
    14d0:	ba 2f       	mov	r27, r26
    14d2:	a0 2d       	mov	r26, r0
    14d4:	0b 01       	movw	r0, r22
    14d6:	b9 01       	movw	r22, r18
    14d8:	90 01       	movw	r18, r0
    14da:	0c 01       	movw	r0, r24
    14dc:	ca 01       	movw	r24, r20
    14de:	a0 01       	movw	r20, r0
    14e0:	11 24       	eor	r1, r1
    14e2:	ff 27       	eor	r31, r31
    14e4:	59 1b       	sub	r21, r25
    14e6:	99 f0       	breq	.+38     	; 0x150e <__addsf3x+0x5c>
    14e8:	59 3f       	cpi	r21, 0xF9	; 249
    14ea:	50 f4       	brcc	.+20     	; 0x1500 <__addsf3x+0x4e>
    14ec:	50 3e       	cpi	r21, 0xE0	; 224
    14ee:	68 f1       	brcs	.+90     	; 0x154a <__addsf3x+0x98>
    14f0:	1a 16       	cp	r1, r26
    14f2:	f0 40       	sbci	r31, 0x00	; 0
    14f4:	a2 2f       	mov	r26, r18
    14f6:	23 2f       	mov	r18, r19
    14f8:	34 2f       	mov	r19, r20
    14fa:	44 27       	eor	r20, r20
    14fc:	58 5f       	subi	r21, 0xF8	; 248
    14fe:	f3 cf       	rjmp	.-26     	; 0x14e6 <__addsf3x+0x34>
    1500:	46 95       	lsr	r20
    1502:	37 95       	ror	r19
    1504:	27 95       	ror	r18
    1506:	a7 95       	ror	r26
    1508:	f0 40       	sbci	r31, 0x00	; 0
    150a:	53 95       	inc	r21
    150c:	c9 f7       	brne	.-14     	; 0x1500 <__addsf3x+0x4e>
    150e:	7e f4       	brtc	.+30     	; 0x152e <__addsf3x+0x7c>
    1510:	1f 16       	cp	r1, r31
    1512:	ba 0b       	sbc	r27, r26
    1514:	62 0b       	sbc	r22, r18
    1516:	73 0b       	sbc	r23, r19
    1518:	84 0b       	sbc	r24, r20
    151a:	ba f0       	brmi	.+46     	; 0x154a <__addsf3x+0x98>
    151c:	91 50       	subi	r25, 0x01	; 1
    151e:	a1 f0       	breq	.+40     	; 0x1548 <__addsf3x+0x96>
    1520:	ff 0f       	add	r31, r31
    1522:	bb 1f       	adc	r27, r27
    1524:	66 1f       	adc	r22, r22
    1526:	77 1f       	adc	r23, r23
    1528:	88 1f       	adc	r24, r24
    152a:	c2 f7       	brpl	.-16     	; 0x151c <__addsf3x+0x6a>
    152c:	0e c0       	rjmp	.+28     	; 0x154a <__addsf3x+0x98>
    152e:	ba 0f       	add	r27, r26
    1530:	62 1f       	adc	r22, r18
    1532:	73 1f       	adc	r23, r19
    1534:	84 1f       	adc	r24, r20
    1536:	48 f4       	brcc	.+18     	; 0x154a <__addsf3x+0x98>
    1538:	87 95       	ror	r24
    153a:	77 95       	ror	r23
    153c:	67 95       	ror	r22
    153e:	b7 95       	ror	r27
    1540:	f7 95       	ror	r31
    1542:	9e 3f       	cpi	r25, 0xFE	; 254
    1544:	08 f0       	brcs	.+2      	; 0x1548 <__addsf3x+0x96>
    1546:	b3 cf       	rjmp	.-154    	; 0x14ae <__addsf3+0x1e>
    1548:	93 95       	inc	r25
    154a:	88 0f       	add	r24, r24
    154c:	08 f0       	brcs	.+2      	; 0x1550 <__addsf3x+0x9e>
    154e:	99 27       	eor	r25, r25
    1550:	ee 0f       	add	r30, r30
    1552:	97 95       	ror	r25
    1554:	87 95       	ror	r24
    1556:	08 95       	ret

00001558 <__cmpsf2>:
    1558:	d9 d0       	rcall	.+434    	; 0x170c <__fp_cmp>
    155a:	08 f4       	brcc	.+2      	; 0x155e <__cmpsf2+0x6>
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	08 95       	ret

00001560 <__divsf3>:
    1560:	0c d0       	rcall	.+24     	; 0x157a <__divsf3x>
    1562:	0f c1       	rjmp	.+542    	; 0x1782 <__fp_round>
    1564:	07 d1       	rcall	.+526    	; 0x1774 <__fp_pscB>
    1566:	40 f0       	brcs	.+16     	; 0x1578 <__divsf3+0x18>
    1568:	fe d0       	rcall	.+508    	; 0x1766 <__fp_pscA>
    156a:	30 f0       	brcs	.+12     	; 0x1578 <__divsf3+0x18>
    156c:	21 f4       	brne	.+8      	; 0x1576 <__divsf3+0x16>
    156e:	5f 3f       	cpi	r21, 0xFF	; 255
    1570:	19 f0       	breq	.+6      	; 0x1578 <__divsf3+0x18>
    1572:	f0 c0       	rjmp	.+480    	; 0x1754 <__fp_inf>
    1574:	51 11       	cpse	r21, r1
    1576:	39 c1       	rjmp	.+626    	; 0x17ea <__fp_szero>
    1578:	f3 c0       	rjmp	.+486    	; 0x1760 <__fp_nan>

0000157a <__divsf3x>:
    157a:	14 d1       	rcall	.+552    	; 0x17a4 <__fp_split3>
    157c:	98 f3       	brcs	.-26     	; 0x1564 <__divsf3+0x4>

0000157e <__divsf3_pse>:
    157e:	99 23       	and	r25, r25
    1580:	c9 f3       	breq	.-14     	; 0x1574 <__divsf3+0x14>
    1582:	55 23       	and	r21, r21
    1584:	b1 f3       	breq	.-20     	; 0x1572 <__divsf3+0x12>
    1586:	95 1b       	sub	r25, r21
    1588:	55 0b       	sbc	r21, r21
    158a:	bb 27       	eor	r27, r27
    158c:	aa 27       	eor	r26, r26
    158e:	62 17       	cp	r22, r18
    1590:	73 07       	cpc	r23, r19
    1592:	84 07       	cpc	r24, r20
    1594:	38 f0       	brcs	.+14     	; 0x15a4 <__divsf3_pse+0x26>
    1596:	9f 5f       	subi	r25, 0xFF	; 255
    1598:	5f 4f       	sbci	r21, 0xFF	; 255
    159a:	22 0f       	add	r18, r18
    159c:	33 1f       	adc	r19, r19
    159e:	44 1f       	adc	r20, r20
    15a0:	aa 1f       	adc	r26, r26
    15a2:	a9 f3       	breq	.-22     	; 0x158e <__divsf3_pse+0x10>
    15a4:	33 d0       	rcall	.+102    	; 0x160c <__divsf3_pse+0x8e>
    15a6:	0e 2e       	mov	r0, r30
    15a8:	3a f0       	brmi	.+14     	; 0x15b8 <__divsf3_pse+0x3a>
    15aa:	e0 e8       	ldi	r30, 0x80	; 128
    15ac:	30 d0       	rcall	.+96     	; 0x160e <__divsf3_pse+0x90>
    15ae:	91 50       	subi	r25, 0x01	; 1
    15b0:	50 40       	sbci	r21, 0x00	; 0
    15b2:	e6 95       	lsr	r30
    15b4:	00 1c       	adc	r0, r0
    15b6:	ca f7       	brpl	.-14     	; 0x15aa <__divsf3_pse+0x2c>
    15b8:	29 d0       	rcall	.+82     	; 0x160c <__divsf3_pse+0x8e>
    15ba:	fe 2f       	mov	r31, r30
    15bc:	27 d0       	rcall	.+78     	; 0x160c <__divsf3_pse+0x8e>
    15be:	66 0f       	add	r22, r22
    15c0:	77 1f       	adc	r23, r23
    15c2:	88 1f       	adc	r24, r24
    15c4:	bb 1f       	adc	r27, r27
    15c6:	26 17       	cp	r18, r22
    15c8:	37 07       	cpc	r19, r23
    15ca:	48 07       	cpc	r20, r24
    15cc:	ab 07       	cpc	r26, r27
    15ce:	b0 e8       	ldi	r27, 0x80	; 128
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <__divsf3_pse+0x56>
    15d2:	bb 0b       	sbc	r27, r27
    15d4:	80 2d       	mov	r24, r0
    15d6:	bf 01       	movw	r22, r30
    15d8:	ff 27       	eor	r31, r31
    15da:	93 58       	subi	r25, 0x83	; 131
    15dc:	5f 4f       	sbci	r21, 0xFF	; 255
    15de:	2a f0       	brmi	.+10     	; 0x15ea <__divsf3_pse+0x6c>
    15e0:	9e 3f       	cpi	r25, 0xFE	; 254
    15e2:	51 05       	cpc	r21, r1
    15e4:	68 f0       	brcs	.+26     	; 0x1600 <__divsf3_pse+0x82>
    15e6:	b6 c0       	rjmp	.+364    	; 0x1754 <__fp_inf>
    15e8:	00 c1       	rjmp	.+512    	; 0x17ea <__fp_szero>
    15ea:	5f 3f       	cpi	r21, 0xFF	; 255
    15ec:	ec f3       	brlt	.-6      	; 0x15e8 <__divsf3_pse+0x6a>
    15ee:	98 3e       	cpi	r25, 0xE8	; 232
    15f0:	dc f3       	brlt	.-10     	; 0x15e8 <__divsf3_pse+0x6a>
    15f2:	86 95       	lsr	r24
    15f4:	77 95       	ror	r23
    15f6:	67 95       	ror	r22
    15f8:	b7 95       	ror	r27
    15fa:	f7 95       	ror	r31
    15fc:	9f 5f       	subi	r25, 0xFF	; 255
    15fe:	c9 f7       	brne	.-14     	; 0x15f2 <__divsf3_pse+0x74>
    1600:	88 0f       	add	r24, r24
    1602:	91 1d       	adc	r25, r1
    1604:	96 95       	lsr	r25
    1606:	87 95       	ror	r24
    1608:	97 f9       	bld	r25, 7
    160a:	08 95       	ret
    160c:	e1 e0       	ldi	r30, 0x01	; 1
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	88 1f       	adc	r24, r24
    1614:	bb 1f       	adc	r27, r27
    1616:	62 17       	cp	r22, r18
    1618:	73 07       	cpc	r23, r19
    161a:	84 07       	cpc	r24, r20
    161c:	ba 07       	cpc	r27, r26
    161e:	20 f0       	brcs	.+8      	; 0x1628 <__divsf3_pse+0xaa>
    1620:	62 1b       	sub	r22, r18
    1622:	73 0b       	sbc	r23, r19
    1624:	84 0b       	sbc	r24, r20
    1626:	ba 0b       	sbc	r27, r26
    1628:	ee 1f       	adc	r30, r30
    162a:	88 f7       	brcc	.-30     	; 0x160e <__divsf3_pse+0x90>
    162c:	e0 95       	com	r30
    162e:	08 95       	ret

00001630 <__fixsfsi>:
    1630:	04 d0       	rcall	.+8      	; 0x163a <__fixunssfsi>
    1632:	68 94       	set
    1634:	b1 11       	cpse	r27, r1
    1636:	d9 c0       	rjmp	.+434    	; 0x17ea <__fp_szero>
    1638:	08 95       	ret

0000163a <__fixunssfsi>:
    163a:	bc d0       	rcall	.+376    	; 0x17b4 <__fp_splitA>
    163c:	88 f0       	brcs	.+34     	; 0x1660 <__fixunssfsi+0x26>
    163e:	9f 57       	subi	r25, 0x7F	; 127
    1640:	90 f0       	brcs	.+36     	; 0x1666 <__fixunssfsi+0x2c>
    1642:	b9 2f       	mov	r27, r25
    1644:	99 27       	eor	r25, r25
    1646:	b7 51       	subi	r27, 0x17	; 23
    1648:	a0 f0       	brcs	.+40     	; 0x1672 <__fixunssfsi+0x38>
    164a:	d1 f0       	breq	.+52     	; 0x1680 <__fixunssfsi+0x46>
    164c:	66 0f       	add	r22, r22
    164e:	77 1f       	adc	r23, r23
    1650:	88 1f       	adc	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	1a f0       	brmi	.+6      	; 0x165c <__fixunssfsi+0x22>
    1656:	ba 95       	dec	r27
    1658:	c9 f7       	brne	.-14     	; 0x164c <__fixunssfsi+0x12>
    165a:	12 c0       	rjmp	.+36     	; 0x1680 <__fixunssfsi+0x46>
    165c:	b1 30       	cpi	r27, 0x01	; 1
    165e:	81 f0       	breq	.+32     	; 0x1680 <__fixunssfsi+0x46>
    1660:	c3 d0       	rcall	.+390    	; 0x17e8 <__fp_zero>
    1662:	b1 e0       	ldi	r27, 0x01	; 1
    1664:	08 95       	ret
    1666:	c0 c0       	rjmp	.+384    	; 0x17e8 <__fp_zero>
    1668:	67 2f       	mov	r22, r23
    166a:	78 2f       	mov	r23, r24
    166c:	88 27       	eor	r24, r24
    166e:	b8 5f       	subi	r27, 0xF8	; 248
    1670:	39 f0       	breq	.+14     	; 0x1680 <__fixunssfsi+0x46>
    1672:	b9 3f       	cpi	r27, 0xF9	; 249
    1674:	cc f3       	brlt	.-14     	; 0x1668 <__fixunssfsi+0x2e>
    1676:	86 95       	lsr	r24
    1678:	77 95       	ror	r23
    167a:	67 95       	ror	r22
    167c:	b3 95       	inc	r27
    167e:	d9 f7       	brne	.-10     	; 0x1676 <__fixunssfsi+0x3c>
    1680:	3e f4       	brtc	.+14     	; 0x1690 <__fixunssfsi+0x56>
    1682:	90 95       	com	r25
    1684:	80 95       	com	r24
    1686:	70 95       	com	r23
    1688:	61 95       	neg	r22
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	8f 4f       	sbci	r24, 0xFF	; 255
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	08 95       	ret

00001692 <__floatunsisf>:
    1692:	e8 94       	clt
    1694:	09 c0       	rjmp	.+18     	; 0x16a8 <__floatsisf+0x12>

00001696 <__floatsisf>:
    1696:	97 fb       	bst	r25, 7
    1698:	3e f4       	brtc	.+14     	; 0x16a8 <__floatsisf+0x12>
    169a:	90 95       	com	r25
    169c:	80 95       	com	r24
    169e:	70 95       	com	r23
    16a0:	61 95       	neg	r22
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
    16a4:	8f 4f       	sbci	r24, 0xFF	; 255
    16a6:	9f 4f       	sbci	r25, 0xFF	; 255
    16a8:	99 23       	and	r25, r25
    16aa:	a9 f0       	breq	.+42     	; 0x16d6 <__floatsisf+0x40>
    16ac:	f9 2f       	mov	r31, r25
    16ae:	96 e9       	ldi	r25, 0x96	; 150
    16b0:	bb 27       	eor	r27, r27
    16b2:	93 95       	inc	r25
    16b4:	f6 95       	lsr	r31
    16b6:	87 95       	ror	r24
    16b8:	77 95       	ror	r23
    16ba:	67 95       	ror	r22
    16bc:	b7 95       	ror	r27
    16be:	f1 11       	cpse	r31, r1
    16c0:	f8 cf       	rjmp	.-16     	; 0x16b2 <__floatsisf+0x1c>
    16c2:	fa f4       	brpl	.+62     	; 0x1702 <__floatsisf+0x6c>
    16c4:	bb 0f       	add	r27, r27
    16c6:	11 f4       	brne	.+4      	; 0x16cc <__floatsisf+0x36>
    16c8:	60 ff       	sbrs	r22, 0
    16ca:	1b c0       	rjmp	.+54     	; 0x1702 <__floatsisf+0x6c>
    16cc:	6f 5f       	subi	r22, 0xFF	; 255
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	8f 4f       	sbci	r24, 0xFF	; 255
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	16 c0       	rjmp	.+44     	; 0x1702 <__floatsisf+0x6c>
    16d6:	88 23       	and	r24, r24
    16d8:	11 f0       	breq	.+4      	; 0x16de <__floatsisf+0x48>
    16da:	96 e9       	ldi	r25, 0x96	; 150
    16dc:	11 c0       	rjmp	.+34     	; 0x1700 <__floatsisf+0x6a>
    16de:	77 23       	and	r23, r23
    16e0:	21 f0       	breq	.+8      	; 0x16ea <__floatsisf+0x54>
    16e2:	9e e8       	ldi	r25, 0x8E	; 142
    16e4:	87 2f       	mov	r24, r23
    16e6:	76 2f       	mov	r23, r22
    16e8:	05 c0       	rjmp	.+10     	; 0x16f4 <__floatsisf+0x5e>
    16ea:	66 23       	and	r22, r22
    16ec:	71 f0       	breq	.+28     	; 0x170a <__floatsisf+0x74>
    16ee:	96 e8       	ldi	r25, 0x86	; 134
    16f0:	86 2f       	mov	r24, r22
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	2a f0       	brmi	.+10     	; 0x1702 <__floatsisf+0x6c>
    16f8:	9a 95       	dec	r25
    16fa:	66 0f       	add	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	88 1f       	adc	r24, r24
    1700:	da f7       	brpl	.-10     	; 0x16f8 <__floatsisf+0x62>
    1702:	88 0f       	add	r24, r24
    1704:	96 95       	lsr	r25
    1706:	87 95       	ror	r24
    1708:	97 f9       	bld	r25, 7
    170a:	08 95       	ret

0000170c <__fp_cmp>:
    170c:	99 0f       	add	r25, r25
    170e:	00 08       	sbc	r0, r0
    1710:	55 0f       	add	r21, r21
    1712:	aa 0b       	sbc	r26, r26
    1714:	e0 e8       	ldi	r30, 0x80	; 128
    1716:	fe ef       	ldi	r31, 0xFE	; 254
    1718:	16 16       	cp	r1, r22
    171a:	17 06       	cpc	r1, r23
    171c:	e8 07       	cpc	r30, r24
    171e:	f9 07       	cpc	r31, r25
    1720:	c0 f0       	brcs	.+48     	; 0x1752 <__fp_cmp+0x46>
    1722:	12 16       	cp	r1, r18
    1724:	13 06       	cpc	r1, r19
    1726:	e4 07       	cpc	r30, r20
    1728:	f5 07       	cpc	r31, r21
    172a:	98 f0       	brcs	.+38     	; 0x1752 <__fp_cmp+0x46>
    172c:	62 1b       	sub	r22, r18
    172e:	73 0b       	sbc	r23, r19
    1730:	84 0b       	sbc	r24, r20
    1732:	95 0b       	sbc	r25, r21
    1734:	39 f4       	brne	.+14     	; 0x1744 <__fp_cmp+0x38>
    1736:	0a 26       	eor	r0, r26
    1738:	61 f0       	breq	.+24     	; 0x1752 <__fp_cmp+0x46>
    173a:	23 2b       	or	r18, r19
    173c:	24 2b       	or	r18, r20
    173e:	25 2b       	or	r18, r21
    1740:	21 f4       	brne	.+8      	; 0x174a <__fp_cmp+0x3e>
    1742:	08 95       	ret
    1744:	0a 26       	eor	r0, r26
    1746:	09 f4       	brne	.+2      	; 0x174a <__fp_cmp+0x3e>
    1748:	a1 40       	sbci	r26, 0x01	; 1
    174a:	a6 95       	lsr	r26
    174c:	8f ef       	ldi	r24, 0xFF	; 255
    174e:	81 1d       	adc	r24, r1
    1750:	81 1d       	adc	r24, r1
    1752:	08 95       	ret

00001754 <__fp_inf>:
    1754:	97 f9       	bld	r25, 7
    1756:	9f 67       	ori	r25, 0x7F	; 127
    1758:	80 e8       	ldi	r24, 0x80	; 128
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	08 95       	ret

00001760 <__fp_nan>:
    1760:	9f ef       	ldi	r25, 0xFF	; 255
    1762:	80 ec       	ldi	r24, 0xC0	; 192
    1764:	08 95       	ret

00001766 <__fp_pscA>:
    1766:	00 24       	eor	r0, r0
    1768:	0a 94       	dec	r0
    176a:	16 16       	cp	r1, r22
    176c:	17 06       	cpc	r1, r23
    176e:	18 06       	cpc	r1, r24
    1770:	09 06       	cpc	r0, r25
    1772:	08 95       	ret

00001774 <__fp_pscB>:
    1774:	00 24       	eor	r0, r0
    1776:	0a 94       	dec	r0
    1778:	12 16       	cp	r1, r18
    177a:	13 06       	cpc	r1, r19
    177c:	14 06       	cpc	r1, r20
    177e:	05 06       	cpc	r0, r21
    1780:	08 95       	ret

00001782 <__fp_round>:
    1782:	09 2e       	mov	r0, r25
    1784:	03 94       	inc	r0
    1786:	00 0c       	add	r0, r0
    1788:	11 f4       	brne	.+4      	; 0x178e <__fp_round+0xc>
    178a:	88 23       	and	r24, r24
    178c:	52 f0       	brmi	.+20     	; 0x17a2 <__fp_round+0x20>
    178e:	bb 0f       	add	r27, r27
    1790:	40 f4       	brcc	.+16     	; 0x17a2 <__fp_round+0x20>
    1792:	bf 2b       	or	r27, r31
    1794:	11 f4       	brne	.+4      	; 0x179a <__fp_round+0x18>
    1796:	60 ff       	sbrs	r22, 0
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <__fp_round+0x20>
    179a:	6f 5f       	subi	r22, 0xFF	; 255
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8f 4f       	sbci	r24, 0xFF	; 255
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	08 95       	ret

000017a4 <__fp_split3>:
    17a4:	57 fd       	sbrc	r21, 7
    17a6:	90 58       	subi	r25, 0x80	; 128
    17a8:	44 0f       	add	r20, r20
    17aa:	55 1f       	adc	r21, r21
    17ac:	59 f0       	breq	.+22     	; 0x17c4 <__fp_splitA+0x10>
    17ae:	5f 3f       	cpi	r21, 0xFF	; 255
    17b0:	71 f0       	breq	.+28     	; 0x17ce <__fp_splitA+0x1a>
    17b2:	47 95       	ror	r20

000017b4 <__fp_splitA>:
    17b4:	88 0f       	add	r24, r24
    17b6:	97 fb       	bst	r25, 7
    17b8:	99 1f       	adc	r25, r25
    17ba:	61 f0       	breq	.+24     	; 0x17d4 <__fp_splitA+0x20>
    17bc:	9f 3f       	cpi	r25, 0xFF	; 255
    17be:	79 f0       	breq	.+30     	; 0x17de <__fp_splitA+0x2a>
    17c0:	87 95       	ror	r24
    17c2:	08 95       	ret
    17c4:	12 16       	cp	r1, r18
    17c6:	13 06       	cpc	r1, r19
    17c8:	14 06       	cpc	r1, r20
    17ca:	55 1f       	adc	r21, r21
    17cc:	f2 cf       	rjmp	.-28     	; 0x17b2 <__fp_split3+0xe>
    17ce:	46 95       	lsr	r20
    17d0:	f1 df       	rcall	.-30     	; 0x17b4 <__fp_splitA>
    17d2:	08 c0       	rjmp	.+16     	; 0x17e4 <__fp_splitA+0x30>
    17d4:	16 16       	cp	r1, r22
    17d6:	17 06       	cpc	r1, r23
    17d8:	18 06       	cpc	r1, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	f1 cf       	rjmp	.-30     	; 0x17c0 <__fp_splitA+0xc>
    17de:	86 95       	lsr	r24
    17e0:	71 05       	cpc	r23, r1
    17e2:	61 05       	cpc	r22, r1
    17e4:	08 94       	sec
    17e6:	08 95       	ret

000017e8 <__fp_zero>:
    17e8:	e8 94       	clt

000017ea <__fp_szero>:
    17ea:	bb 27       	eor	r27, r27
    17ec:	66 27       	eor	r22, r22
    17ee:	77 27       	eor	r23, r23
    17f0:	cb 01       	movw	r24, r22
    17f2:	97 f9       	bld	r25, 7
    17f4:	08 95       	ret

000017f6 <__gesf2>:
    17f6:	8a df       	rcall	.-236    	; 0x170c <__fp_cmp>
    17f8:	08 f4       	brcc	.+2      	; 0x17fc <__gesf2+0x6>
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	08 95       	ret

000017fe <__mulsf3>:
    17fe:	0b d0       	rcall	.+22     	; 0x1816 <__mulsf3x>
    1800:	c0 cf       	rjmp	.-128    	; 0x1782 <__fp_round>
    1802:	b1 df       	rcall	.-158    	; 0x1766 <__fp_pscA>
    1804:	28 f0       	brcs	.+10     	; 0x1810 <__mulsf3+0x12>
    1806:	b6 df       	rcall	.-148    	; 0x1774 <__fp_pscB>
    1808:	18 f0       	brcs	.+6      	; 0x1810 <__mulsf3+0x12>
    180a:	95 23       	and	r25, r21
    180c:	09 f0       	breq	.+2      	; 0x1810 <__mulsf3+0x12>
    180e:	a2 cf       	rjmp	.-188    	; 0x1754 <__fp_inf>
    1810:	a7 cf       	rjmp	.-178    	; 0x1760 <__fp_nan>
    1812:	11 24       	eor	r1, r1
    1814:	ea cf       	rjmp	.-44     	; 0x17ea <__fp_szero>

00001816 <__mulsf3x>:
    1816:	c6 df       	rcall	.-116    	; 0x17a4 <__fp_split3>
    1818:	a0 f3       	brcs	.-24     	; 0x1802 <__mulsf3+0x4>

0000181a <__mulsf3_pse>:
    181a:	95 9f       	mul	r25, r21
    181c:	d1 f3       	breq	.-12     	; 0x1812 <__mulsf3+0x14>
    181e:	95 0f       	add	r25, r21
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	55 1f       	adc	r21, r21
    1824:	62 9f       	mul	r22, r18
    1826:	f0 01       	movw	r30, r0
    1828:	72 9f       	mul	r23, r18
    182a:	bb 27       	eor	r27, r27
    182c:	f0 0d       	add	r31, r0
    182e:	b1 1d       	adc	r27, r1
    1830:	63 9f       	mul	r22, r19
    1832:	aa 27       	eor	r26, r26
    1834:	f0 0d       	add	r31, r0
    1836:	b1 1d       	adc	r27, r1
    1838:	aa 1f       	adc	r26, r26
    183a:	64 9f       	mul	r22, r20
    183c:	66 27       	eor	r22, r22
    183e:	b0 0d       	add	r27, r0
    1840:	a1 1d       	adc	r26, r1
    1842:	66 1f       	adc	r22, r22
    1844:	82 9f       	mul	r24, r18
    1846:	22 27       	eor	r18, r18
    1848:	b0 0d       	add	r27, r0
    184a:	a1 1d       	adc	r26, r1
    184c:	62 1f       	adc	r22, r18
    184e:	73 9f       	mul	r23, r19
    1850:	b0 0d       	add	r27, r0
    1852:	a1 1d       	adc	r26, r1
    1854:	62 1f       	adc	r22, r18
    1856:	83 9f       	mul	r24, r19
    1858:	a0 0d       	add	r26, r0
    185a:	61 1d       	adc	r22, r1
    185c:	22 1f       	adc	r18, r18
    185e:	74 9f       	mul	r23, r20
    1860:	33 27       	eor	r19, r19
    1862:	a0 0d       	add	r26, r0
    1864:	61 1d       	adc	r22, r1
    1866:	23 1f       	adc	r18, r19
    1868:	84 9f       	mul	r24, r20
    186a:	60 0d       	add	r22, r0
    186c:	21 1d       	adc	r18, r1
    186e:	82 2f       	mov	r24, r18
    1870:	76 2f       	mov	r23, r22
    1872:	6a 2f       	mov	r22, r26
    1874:	11 24       	eor	r1, r1
    1876:	9f 57       	subi	r25, 0x7F	; 127
    1878:	50 40       	sbci	r21, 0x00	; 0
    187a:	8a f0       	brmi	.+34     	; 0x189e <__mulsf3_pse+0x84>
    187c:	e1 f0       	breq	.+56     	; 0x18b6 <__mulsf3_pse+0x9c>
    187e:	88 23       	and	r24, r24
    1880:	4a f0       	brmi	.+18     	; 0x1894 <__mulsf3_pse+0x7a>
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	bb 1f       	adc	r27, r27
    1888:	66 1f       	adc	r22, r22
    188a:	77 1f       	adc	r23, r23
    188c:	88 1f       	adc	r24, r24
    188e:	91 50       	subi	r25, 0x01	; 1
    1890:	50 40       	sbci	r21, 0x00	; 0
    1892:	a9 f7       	brne	.-22     	; 0x187e <__mulsf3_pse+0x64>
    1894:	9e 3f       	cpi	r25, 0xFE	; 254
    1896:	51 05       	cpc	r21, r1
    1898:	70 f0       	brcs	.+28     	; 0x18b6 <__mulsf3_pse+0x9c>
    189a:	5c cf       	rjmp	.-328    	; 0x1754 <__fp_inf>
    189c:	a6 cf       	rjmp	.-180    	; 0x17ea <__fp_szero>
    189e:	5f 3f       	cpi	r21, 0xFF	; 255
    18a0:	ec f3       	brlt	.-6      	; 0x189c <__mulsf3_pse+0x82>
    18a2:	98 3e       	cpi	r25, 0xE8	; 232
    18a4:	dc f3       	brlt	.-10     	; 0x189c <__mulsf3_pse+0x82>
    18a6:	86 95       	lsr	r24
    18a8:	77 95       	ror	r23
    18aa:	67 95       	ror	r22
    18ac:	b7 95       	ror	r27
    18ae:	f7 95       	ror	r31
    18b0:	e7 95       	ror	r30
    18b2:	9f 5f       	subi	r25, 0xFF	; 255
    18b4:	c1 f7       	brne	.-16     	; 0x18a6 <__mulsf3_pse+0x8c>
    18b6:	fe 2b       	or	r31, r30
    18b8:	88 0f       	add	r24, r24
    18ba:	91 1d       	adc	r25, r1
    18bc:	96 95       	lsr	r25
    18be:	87 95       	ror	r24
    18c0:	97 f9       	bld	r25, 7
    18c2:	08 95       	ret

000018c4 <__divmodhi4>:
    18c4:	97 fb       	bst	r25, 7
    18c6:	09 2e       	mov	r0, r25
    18c8:	07 26       	eor	r0, r23
    18ca:	0a d0       	rcall	.+20     	; 0x18e0 <__divmodhi4_neg1>
    18cc:	77 fd       	sbrc	r23, 7
    18ce:	04 d0       	rcall	.+8      	; 0x18d8 <__divmodhi4_neg2>
    18d0:	0c d0       	rcall	.+24     	; 0x18ea <__udivmodhi4>
    18d2:	06 d0       	rcall	.+12     	; 0x18e0 <__divmodhi4_neg1>
    18d4:	00 20       	and	r0, r0
    18d6:	1a f4       	brpl	.+6      	; 0x18de <__divmodhi4_exit>

000018d8 <__divmodhi4_neg2>:
    18d8:	70 95       	com	r23
    18da:	61 95       	neg	r22
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255

000018de <__divmodhi4_exit>:
    18de:	08 95       	ret

000018e0 <__divmodhi4_neg1>:
    18e0:	f6 f7       	brtc	.-4      	; 0x18de <__divmodhi4_exit>
    18e2:	90 95       	com	r25
    18e4:	81 95       	neg	r24
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	08 95       	ret

000018ea <__udivmodhi4>:
    18ea:	aa 1b       	sub	r26, r26
    18ec:	bb 1b       	sub	r27, r27
    18ee:	51 e1       	ldi	r21, 0x11	; 17
    18f0:	07 c0       	rjmp	.+14     	; 0x1900 <__udivmodhi4_ep>

000018f2 <__udivmodhi4_loop>:
    18f2:	aa 1f       	adc	r26, r26
    18f4:	bb 1f       	adc	r27, r27
    18f6:	a6 17       	cp	r26, r22
    18f8:	b7 07       	cpc	r27, r23
    18fa:	10 f0       	brcs	.+4      	; 0x1900 <__udivmodhi4_ep>
    18fc:	a6 1b       	sub	r26, r22
    18fe:	b7 0b       	sbc	r27, r23

00001900 <__udivmodhi4_ep>:
    1900:	88 1f       	adc	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	5a 95       	dec	r21
    1906:	a9 f7       	brne	.-22     	; 0x18f2 <__udivmodhi4_loop>
    1908:	80 95       	com	r24
    190a:	90 95       	com	r25
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	08 95       	ret

00001912 <strncmp>:
    1912:	fb 01       	movw	r30, r22
    1914:	dc 01       	movw	r26, r24
    1916:	41 50       	subi	r20, 0x01	; 1
    1918:	50 40       	sbci	r21, 0x00	; 0
    191a:	30 f0       	brcs	.+12     	; 0x1928 <strncmp+0x16>
    191c:	8d 91       	ld	r24, X+
    191e:	01 90       	ld	r0, Z+
    1920:	80 19       	sub	r24, r0
    1922:	19 f4       	brne	.+6      	; 0x192a <strncmp+0x18>
    1924:	00 20       	and	r0, r0
    1926:	b9 f7       	brne	.-18     	; 0x1916 <strncmp+0x4>
    1928:	88 1b       	sub	r24, r24
    192a:	99 0b       	sbc	r25, r25
    192c:	08 95       	ret

0000192e <__eerd_word_m328p>:
    192e:	a8 e1       	ldi	r26, 0x18	; 24
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	42 e0       	ldi	r20, 0x02	; 2
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__eerd_blraw_m328p>

0000193a <__eewr_word_m328p>:
    193a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__eewr_byte_m328p>
    193e:	27 2f       	mov	r18, r23
    1940:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__eewr_r18_m328p>

00001944 <__eerd_block_m328p>:
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22

00001948 <__eerd_blraw_m328p>:
    1948:	fc 01       	movw	r30, r24
    194a:	f9 99       	sbic	0x1f, 1	; 31
    194c:	fe cf       	rjmp	.-4      	; 0x194a <__eerd_blraw_m328p+0x2>
    194e:	06 c0       	rjmp	.+12     	; 0x195c <__eerd_blraw_m328p+0x14>
    1950:	f2 bd       	out	0x22, r31	; 34
    1952:	e1 bd       	out	0x21, r30	; 33
    1954:	f8 9a       	sbi	0x1f, 0	; 31
    1956:	31 96       	adiw	r30, 0x01	; 1
    1958:	00 b4       	in	r0, 0x20	; 32
    195a:	0d 92       	st	X+, r0
    195c:	41 50       	subi	r20, 0x01	; 1
    195e:	50 40       	sbci	r21, 0x00	; 0
    1960:	b8 f7       	brcc	.-18     	; 0x1950 <__eerd_blraw_m328p+0x8>
    1962:	08 95       	ret

00001964 <__eewr_byte_m328p>:
    1964:	26 2f       	mov	r18, r22

00001966 <__eewr_r18_m328p>:
    1966:	f9 99       	sbic	0x1f, 1	; 31
    1968:	fe cf       	rjmp	.-4      	; 0x1966 <__eewr_r18_m328p>
    196a:	1f ba       	out	0x1f, r1	; 31
    196c:	92 bd       	out	0x22, r25	; 34
    196e:	81 bd       	out	0x21, r24	; 33
    1970:	20 bd       	out	0x20, r18	; 32
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	fa 9a       	sbi	0x1f, 2	; 31
    1978:	f9 9a       	sbi	0x1f, 1	; 31
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	08 95       	ret

00001980 <_exit>:
    1980:	f8 94       	cli

00001982 <__stop_program>:
    1982:	ff cf       	rjmp	.-2      	; 0x1982 <__stop_program>
